<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Nuxt踩坑之旅]]></title>
      <url>http://www.imaxin.cn/2019/02/14/sth/Nuxt%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/</url>
      <content type="html"><![CDATA[<h2 id="SSR场景"><a href="#SSR场景" class="headerlink" title="SSR场景"></a>SSR场景</h2><p>目前页面中的数据都是异步请求得来的, 截止目前各大搜索引擎可以很好的对同步JS代码进行抓取并索引,所以同步是关键的。如果页面进去就是个loading在转, 这些抓取工具则不会等待请求回来后再抓取，也将无法在Google, Bing以及百度搜索到。</p>
<p>大部分项目用的SPA多数是偏B端或者与原生组合式开发H5+安卓/iOS的app产品， 所以还不需要考虑SEO。</p>
<p>如果是面向C端，那纯SPA无法满足SEO。</p>
<h2 id="Nuxt-js的优点"><a href="#Nuxt-js的优点" class="headerlink" title="Nuxt.js的优点"></a>Nuxt.js的优点</h2><p>第一，更好的SEO。<br>简单来说就是可以将pages目录下的每个<code>页面组件</code>预先加载好并生各自成独立的HTML页面文件，采用服务端渲染，让SPA应用(Vue)也可以拥有SEO。</p>
<p>第二，更快的内容到达时间。<br>换句话说也叫作”更快的完全可交互时间”，什么意思？其实内容到达未必能及时交互, 只是将内容展示出来了用户能看到了，也就是说要等JS,CSS,HTML完全加载完之后才能进行所谓的可交互。<br>这也是SSR想解决并且能解决的问题。<br>SSR的服务很有可能与api后台的服务在同一个机房甚至是同一台机器上跑, 甚至不需要使用HTTP发送请求, 直接用RPC来通信就可以, 这样在server端去获取数据就要比从客户端获取数据要快很多</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>$ npx create-nuxt-app &lt;项目名&gt;
$ npm run dev
</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>1. asyncData、fetch周期都不存在Window对象</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 服务端报错</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 服务端报错</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>2. 配置错误页面</strong><br><strong>可以通过编辑 layouts/error.vue 文件来定制化错误页面.</strong></p>
<pre class=" language-vue"><code class="language-vue"><template>
  <div class="container">
    <h1 v-if="error.statusCode === 404">页面不存在</h1>
    <h1 v-else>应用发生错误异常</h1>
    <nuxt-link to="/">首 页</nuxt-link>
  </div>
</template>

<script>
export default {
  props: ['error'],
  layout: 'blog' // 你可以为错误页面指定自定义的布局
}
</script>
</code></pre>
<p><strong>3. 自定义Loading页面</strong><br><strong>nuxt.config.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  loading<span class="token punctuation">:</span> <span class="token string">'~components/loading.vue'</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>loading.vue</strong></p>
<pre class=" language-vue"><code class="language-vue"><template lang="html">
  <div class="loading-page" v-if="loading">
    <p>Loading...</p>
  </div>
</template>

<script>
export default {
  data: () => ({
    loading: false
  }),
  methods: {
    start () {
      this.loading = true
    },
    finish () {
      this.loading = false
    }
  }
}
</script>
</code></pre>
<p><strong>4. 校验参数</strong><br><strong>如果校验失败，则自动跳转到错误页面</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params<span class="token punctuation">,</span> query <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex">/^d+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// must be number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>5. Header、Footer等公共组件放哪？</strong><br><strong>vue-cli入口文件是app.vue，在nuxt开发当中则是./layout/default.vue</strong></p>
<pre class=" language-vue"><code class="language-vue"><template>
  <div id="app">
    <!-- 公共头部组件 -->
    <xxx-header></xxx-header>
    <!-- 路由视图，相当于router-view -->
    <nuxt/>
    <!-- 公共底部组件 -->
    <xxx-footer></xxx-footer>
  </div>
</template>
</code></pre>
<p><strong>6. 没有keep-alive</strong><br><strong>由于是服务端渲染，所以不支持组件的<code>keep-alive</code>，那自然<code>activated、deactivated</code>这两个生命周期<code>也没了</code></strong></p>
<p><strong>7. 配置插件</strong><br><strong><code>所有插件</code>都写在<code>/plugins目录</code>下，这里以<code>vue-lazyload</code>为例</strong></p>
<p><strong>plugins/lazy-load.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> VueLazyLoad <span class="token keyword">from</span> <span class="token string">'vue-lazyload'</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyLoad<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  loading<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'~/assets/images/loading.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  error<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'~/assets/images/error.jpg'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p><strong>nuxt.config.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>expors <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      src<span class="token punctuation">:</span> <span class="token string">"~/plugins/lazy-load"</span><span class="token punctuation">,</span>
      ssr<span class="token punctuation">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>8. 使用Axios，并配置全局拦截器，处理跨域</strong><br><strong><code>starter-template</code>模板，推荐使用<code>@nuxtjs/axios、@nuxtjs/proxy</code>，不需要在plugins配置</strong></p>
<p><strong>安装依赖</strong></p>
<pre><code>$ npm install @nuxtjs/axios @nuxtjs/proxy --save
</code></pre><p><strong>使用、处理跨域</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// nuxt.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  modules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'@nuxtjs/axios'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不需要加入@nuxtjs/proxy</span>
  axios<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    proxy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    prefix<span class="token punctuation">:</span> <span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// baseURL</span>
    credentials<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">'/api/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      target<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:2001'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 代理地址</span>
      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>组件中使用</strong></p>
<pre class=" language-vue"><code class="language-vue"><script>
export default {
  fetch ({ app }) {
    console.log(app.$axios)
  },
  asyncData ({ app }) {
    console.log(app.$axios)
  },
  created () {
    console.log(this.$axios)
  }
}
</script>
</code></pre>
<p><strong>不需要在plugins配置axios，但是如果要设置全局拦截器，那么就要新建一个/plugins/axios.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> axios <span class="token operator">=</span> app<span class="token punctuation">.</span>$axios<span class="token punctuation">;</span> 
 <span class="token comment" spellcheck="true">// 基本配置</span>
  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10000</span>
  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span>

  <span class="token comment" spellcheck="true">// 请求回调</span>
  axios<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment" spellcheck="true">// 返回回调</span>
  axios<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment" spellcheck="true">// 错误回调</span>
  axios<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>然后在plugins配置它</strong></p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      src<span class="token punctuation">:</span> <span class="token string">"~/plugins/axios"</span><span class="token punctuation">,</span>
      ssr<span class="token punctuation">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>9. 默认Meta标签</strong><br><strong>nuxt.config.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  head<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    title<span class="token punctuation">:</span> <span class="token string">'your project title'</span><span class="token punctuation">,</span>
    meta<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> charset<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'viewport'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'width=device-width, initial-scale=1'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    link<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> rel<span class="token punctuation">:</span> <span class="token string">'stylesheet'</span><span class="token punctuation">,</span> href<span class="token punctuation">:</span> <span class="token string">'https://fonts.googleapis.com/css?family=Roboto'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>10. 页面组件特有的Meta标签</strong></p>
<pre class=" language-vue"><code class="language-vue"><script>
export default {
  head () {
    return {
      meta: 
      [
        {
          name: 'keywords',
          content: '最强王者,今晚吃鸡'
        },
      ]
    }
  }
}
</script>
</code></pre>
<p><strong>11. 动态路由的Meta标签填充</strong><br><strong>游戏详情页面举例子，由于数据是异步获取的，需要把数据获取写在asyncData钩子，待数据获取成功才会渲染该页面组件</strong></p>
<pre class=" language-vue"><code class="language-vue"><script>
export default {
  async asyncData ({ app, params }) {
    let data = await app.$axios.get(`/appinfo/${params.id}`);
    return {
      appname: data.appinfo.appname
    }
  },
  head () {
    return {
      meta: 
      [
        {
          name: 'keywords',
          content: `${this.appname},无限宝石,无限元宝`
        },
      ]
    }
  }
}
</script>
</code></pre>
<p><strong>12. 使用Vuex</strong><br><strong><code>nuxt</code>自己集成了<code>vuex</code>，所以<code>不需要安装</code>，<code>在/store目录下新建index.js</code>即可使用</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>

<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    token<span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    setToken <span class="token punctuation">(</span>state<span class="token punctuation">,</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       state<span class="token punctuation">.</span>token <span class="token operator">=</span> token
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre>
<p><strong>13. 登录状态？</strong><br><strong>vue-cli项目中，可以用<code>vuex-persistedstate</code>，它可以使vuex的状态持久化，页面刷新都<code>不会丢失</code>，原理当然是localStorage啦！问题来了，<code>nuxt</code>项目怎么保存登录状态呢？当然上面这两种方法我们都可以使用，但是有个问题，由于在<code>created</code>钩子中不存在<code>window</code>对象(获取<code>cookie、localStorage</code>都需要<code>window</code>对象)，当需要判断是否存在<code>token</code>的时候，必须要在<code>mounted</code>进行操作，这说明页面进来的<code>一瞬间</code>你无法得知<code>是否已经登录了</code>，这会<code>导致</code>显示用户名、组件显示于隐藏都<code>慢半拍</code></strong></p>
<p><strong><code>nuxt</code>非常友好，它提供了<code>fetch钩子</code>，还有<code>nuxtServerInit</code>，这两个钩子都运行在服务端并且我们能很<code>快速</code>地操作<code>store</code></strong></p>
<p><strong>14. fetch的使用</strong><br><strong>如果页面组件设置了fetch方法，它会在组件每次加载前被调用（在服务端或切换至目标路由之前），此方法需要跟服务端的人员配合</strong></p>
<pre class=" language-vue"><code class="language-vue"><script>
export default {
  async fetch ({ app, store, params }) {
    let { data } = app.$axios.get('/token');
    store.commit('setToken', data.token);
  }
}
</script>
</code></pre>
<p><strong>15. nuxtServerInit</strong><br><strong>终极无敌方法</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>

<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    token<span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    setToken <span class="token punctuation">(</span>state<span class="token punctuation">,</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       state<span class="token punctuation">.</span>token <span class="token operator">=</span> token
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">nuxtServerInit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> req <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> cookie <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>

      <span class="token comment" spellcheck="true">// 将cookie转成json对象（自己实现该方法）</span>
      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token function">cookieparse</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">.</span>token<span class="token punctuation">;</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setToken'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre>
<p><strong>16. 封装自己的全局方法</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> utils <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> printMsg <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    msg <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> otherFn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    printMsg<span class="token punctuation">,</span>
    otherFn
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$utils<span class="token operator">=</span> utils
</code></pre>
<p><strong>组件调用</strong></p>
<pre class=" language-vue"><code class="language-vue"><script>
export default {
  created() {
    this.$zexin.message('小老弟，你怎么回事')
  }
}
</script>
</code></pre>
<p><strong>需要在plugins中配置</strong></p>
<p><strong>17. 全局样式</strong><br><strong>nuxt.config.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  css<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'~/assets/stylesheets/main.min.css'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>18. 使用Element-UI</strong><br><strong>还是plugins文件夹新建element-ui.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 全局引入</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 按需引入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">,</span> Loading<span class="token punctuation">,</span> MessageBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span>
Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$loading <span class="token operator">=</span> Loading<span class="token punctuation">.</span>service
Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$msgbox <span class="token operator">=</span> MessageBox
</code></pre>
<p><strong>nuxt.config.js</strong></p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  css<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      src<span class="token punctuation">:</span> <span class="token string">"~/plugins/element"</span><span class="token punctuation">,</span>
      ssr<span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>18. 如何使用sass预处理器</strong><br><strong>安装依赖</strong></p>
<pre><code>$ npm install node-sass sass-loader --save
</code></pre><p><strong>组件中使用(不需要其他的配置了)</strong></p>
<pre class=" language-vue"><code class="language-vue"><style lang="scss" scoped>

</style>
</code></pre>
<p><strong>19. fetch、asyncData、validate使用范围</strong><br><strong><code>只能在页面组件使用，也就是pages目录下的组件，而不是components目录下的组件，要有所区分</code></strong></p>
<p><strong>20. 传统部署</strong></p>
<pre><code>$ npm run build &amp;&amp; npm run start
</code></pre><p><strong>21. pm2部署</strong><br><strong>pm2能永久保持应用程序活跃，无需停机即可重新加载它们，并不需要传统部署的.nuxt文件夹，该部署方法也跟生产环境一样包含热更新</strong></p>
<p>全局安装</p>
<pre><code>$ npm install pm2 -g
</code></pre><p>启动服务</p>
<pre><code>$ npm run build
$ pm2 start ./node_modules/nuxt/bin/nuxt-start
</code></pre><h2 id="要绕的坑"><a href="#要绕的坑" class="headerlink" title="要绕的坑"></a>要绕的坑</h2><p><strong>坑一： <code>vue-server-renderer版本要保持与vue版本一起更新, 如果有一方没有及时更新将会有很多尴尬的报错</code></strong></p>
<blockquote>
<ul>
<li><strong>vue &amp; vue-server-renderer 2.3.0+</strong></li>
<li><strong>vue-router 2.5.0+</strong></li>
<li><strong>vue-loader 12.0.0+ &amp; vue-style-loader 3.0.0+</strong></li>
</ul>
</blockquote>
<p><strong>如果先前已经使用过 Vue 2.2 的服务器端渲染(SSR)，推荐的代码结构现在略有不同（使用新的 runInNewContext 选项，并设置为 false）</strong></p>
<p><strong>坑二: <code>数据响应</code></strong><br><strong>不希望不同的用户每次访问的都是同一个server实例, 这会导致非常麻烦的交叉请求的数据污染问题</strong><br><strong>所以每次打开一定要是一个全新的实例, 每次都是工厂创建出来的新的实例</strong><br><strong>由于把请求数据的过程放在了server端来完成, 所以也不需要在前端做出数据响应的操作, 这样可以规避<code>数据</code>转换为<code>响应式对象</code>所产生的性能开销</strong><br><strong>可以说是将多个ajax的请求合并为了一个</strong><br><strong>也就是说平时在客户端根据后台返回的数据来做出if else 的判断都可以不用写了, 比如说tabel的loding组件等等</strong></p>
<p><strong>坑三：<code>组件生命周期</code></strong><br><strong>众所周知，<code>Vue</code>的生命周期全都跑在<code>客户端(浏览器)</code>，而<code>Nuxt</code>的生命周期有些在<code>服务端(Node)，客户端，甚至两边都在</code></strong><br><strong>由于没有动态更新, 所有的生命周期钩子函数中只有<code>beforeCreate</code>和<code>created</code>会在服务端渲染(SSR)过程中被调用. </strong><br><strong>所以在写代码的过程中, 处理交互和初始化数据的时候不要写在这两个生命周期里, 因为在server端执行过之后, 在客户端就不执行了, 它们是同一套生命周期</strong></p>
<blockquote>
<p><strong>我们先来想一下，在纯浏览器渲染的Vue项目中，我们是怎么获取异步数据并渲染到组件中的？一般是在created或者mounted生命周期里发起异步请求，然后在成功回调里执行this.data = xxx，Vue监听到数据发生改变，走后面的Dom Diff，打patch，做DOM更新。</strong></p>
<p><strong>那么服务端渲染可不可以也这么做呢？答案是不行的。</strong></p>
<p><strong>在mounted里肯定不行，因为SSR都没有mounted生命周期，所以在这里肯定不行。</strong><br><strong>在beforeCreate里发起异步请求是否可以呢，也是不行的。因为请求是异步的，可能还没有等接口返回，服务端就已经把html字符串拼接出来了。</strong></p>
<p><strong>所以，参考一下官方文档，可以得到以下思路：</strong></p>
<p><strong>在渲染前，要预先获取所有需要的异步数据，然后存到Vuex的store中。</strong><br><strong>在后端渲染时，通过Vuex将获取到的数据注入到相应组件中。</strong><br><strong>把store中的数据设置到window.<strong>INITIAL_STATE</strong>属性中。</strong><br><strong>在浏览器环境中，通过Vuex将window.<strong>INITIAL_STATE</strong>里面的数据注入到相应组件中。</strong></p>
<p><strong>正常情况下，通过这几个步骤，服务端吐出来的html字符串相应组件的数据都是最新的，所以第4步并不会引起DOM更新，但如果出了某些问题，吐出来的html字符串没有相应数据，Vue也可以在浏览器端通过`Vuex注入数据，进行DOM更新。</strong></p>
</blockquote>
<p><strong>所以要将类似的操作放在beforeMounted或mounted钩子中执行</strong><br><strong>而希望数据的获取越早越好,页面的展示越快越好, 通常会把请求放在created里面去进行操作</strong><br><strong>而且在server端created创建的副作用操作如定时器, 你在客户端是无法销毁的</strong></p>
<p><strong>坑四: <code>自定义指令</code></strong><br><strong>大部分的自定义指令是用来操作DOM的, 而在server端是没有window也没用document的,所以就会报错</strong><br><strong>这块就看文档吧, 稍微有些复杂</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>大部分的小团队项目的node服务都是基于express来做的, 处理起来比较简单, 基本上之拦截请求, 剩下的交给vue-server来处理, 之前只需要一个<code>npm run build</code>就可以完成打包, 之后将静态文件部署至服务器就可以了, 现在多了一个server, 就需要前端自己来维护它, 前期可能要经常去看进程管理, 去看内存有没有溢出等一系列问题, 这也是需要权衡的的部分, 而且通常这种情况下搭建的server健壮性是很弱的, 需要有足够宽的知识面。</p>
<h3 id="更多的服务器负载"><a href="#更多的服务器负载" class="headerlink" title="更多的服务器负载"></a>更多的服务器负载</h3><p>在Node.js渲染过程中, server端的CPU负担要比仅仅只提供静态资源的SPA大很多, 需要考虑在server端的<code>高并发</code>以及<code>负载均衡</code>等维护成本, 可能需要前端人员去兼职运维的工作。</p>
<h3 id="是否真的需要’它’"><a href="#是否真的需要’它’" class="headerlink" title="是否真的需要’它’"></a>是否真的需要’它’</h3><p>项目需要SEO和很频繁的数据IO那么可能需要SSR, 但如果需要进行很多密集的运算的时候, 那么SSR的优势将越来越小。</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue SSR </tag>
            
            <tag> Nuxt.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的事件循环机制]]></title>
      <url>http://www.imaxin.cn/2018/11/01/sth/JavaScript%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="JS是单线程语言"><a href="#JS是单线程语言" class="headerlink" title="JS是单线程语言"></a>JS是单线程语言</h2><p>javascript是一门单线程语言，HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。<br>与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。<br>这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p>
<p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征。</p>
<h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><h3 id="同步任务与异步任务"><a href="#同步任务与异步任务" class="headerlink" title="同步任务与异步任务"></a>同步任务与异步任务</h3><p>单线程就意味着，所有任务需要排队。所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<br>异步执行的运行机制如下：</p>
<ol>
<li>所有同步任务都在主线程上执行，形成一个执行栈</li>
<li>主线程之外，还存在一个”任务队列”。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</li>
<li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li>
<li>主线程不断重复上面的第三步。</li>
</ol>
<h3 id="JS引擎执行模型"><a href="#JS引擎执行模型" class="headerlink" title="JS引擎执行模型"></a>JS引擎执行模型</h3><p>所有的异步结果都是通过 “任务队列(Task Queue)” 来调度被调度. 消息队列中存放的是一个个的任务(Task).<br>Task分为两大类, 分别是 Macro Task（宏任务） 和 Micro Task（微任务）, 并且每个 Macro Task 结束后, 都要清空所有的 Micro Task.<br>Macrotask 会进入 Macro Task Queue, Microtask 会进入 Micro Task Queue。</p>
<ul>
<li><p>Macrotask 包括：</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate</li>
<li>script</li>
<li>I/O</li>
<li>UI rendering</li>
</ul>
</li>
<li><p>Microtask 包括：</p>
<ul>
<li>process.nextTick</li>
<li>Promise.then</li>
<li>Object.observe(该方法已废弃)</li>
<li>MutaionObserver</li>
</ul>
</li>
</ul>
<blockquote>
<p> 所说的, ‘每个 MacroTask 结束后, 都要清空所有的 Micro Task‘。引擎会遍历 Macro Task Queue, 对于每个 MacroTask 执行完毕后都要遍历执行 Tick Task Queue 的所有任务, 紧接着再遍历 MicroTask Queue 的所有任务. (nextTick 会优于 Promise执行)</p>
</blockquote>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop.</p>
<p>先来个例子检验一下：</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'main1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'process.nextTick1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'process.nextTick2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'main2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>执行顺序<br>分析如下</p>
<ol>
<li>开始执行代码，输出 main1，process.nextTick 放入TickTask Queue，setTimeout放入 MacroTask Queue, new Promise 执行 输出 promise，then 方法 放入 MicroTask Queue , 接着 最后一行代码 console.log 输出 main2</li>
<li>当前的 宏任务执行完毕，开始清空微任务，先清空TickTask Queue ,执行 console.log(‘process.nextTick1’); 输出’process.nextTick1；再清空MicroTask Queue执行 console.log(‘promise then’); 输出promise then；微任务全部清空。</li>
<li>开始下次 eventLoop; 执行 setTimeout； 第一行 console.log(‘setTimeout’); 输出setTimeout； process.nextTick 将任务放入了TickTask Queue；当前宏任务执行完毕；开始清空MicroTask Queue，清空TickTaskQueue ,执行 console.log(‘process.nextTick2’);输出process.nextTick2</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> promise </tag>
            
            <tag> Event Loop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js遍历文件目录]]></title>
      <url>http://www.imaxin.cn/2018/09/14/sth/Node.js%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>公司有个项目使用的是webpack构建的vue多页面应用，根目录src文件夹下有2016，2017，2018这几年的前端项目，各个项目构建完成后都会在根目录的dist文件夹下，文件夹名对应src里的各个项目名。为了方便自己快速预览并找到对应项目的路径，把dist目录下的文件树结构遍历，过滤得到<code>html</code>文件的路径，并读取内容里面的<code>title</code>，生成一个<code>json</code>文件，最终整理到一个页面表格内切换预览。</p>
<h2 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h2><p>获取当前文件的绝对路径</p>
<h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><h3 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve"></a>path.resolve</h3><ul>
<li>把一个路径或路径片段的序列解析为一个绝对路径</li>
<li>参数从右往左解析</li>
</ul>
<h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><h3 id="fs-readdir"><a href="#fs-readdir" class="headerlink" title="fs.readdir"></a>fs.readdir</h3><ul>
<li>查看所传目录下的 文件/文件夹 等</li>
<li>callback第二个参数是目录下的文件数组列表，每项都是<code>string</code>(文件名)</li>
</ul>
<h3 id="fs-stat"><a href="#fs-stat" class="headerlink" title="fs.stat"></a>fs.stat</h3><ul>
<li>接受一个文件路径参数</li>
<li>callback第二个参数返回一个<code>fs.Stats</code>类的实例</li>
<li>实例原型上有个方法<code>stats.isDirectory()</code> 判断当前文件路径是否是文件夹</li>
</ul>
<h3 id="fs-writeFile"><a href="#fs-writeFile" class="headerlink" title="fs.writeFile"></a>fs.writeFile</h3><ul>
<li>fs.writeFile(path, str, callback)</li>
<li>默认以<code>w</code>的flags来写文件（没有就创建，清空并写入）</li>
<li>默认<code>UTF-8</code>的编码方式</li>
</ul>
<h3 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a>fs.readFile</h3><ul>
<li>fs.readFile(file, opts, callback)</li>
<li>读取一个文件，如果不指定<code>opts</code>，比如<code>utf-8</code>，则返回一个buffer</li>
<li>可以使用<code>toString</code>得到文件内容</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>从根目录开始得到文件</li>
<li>如果是文件夹就继续到该目录下继续遍历</li>
<li>是html文件的话读取<code>&lt;title&gt;&lt;/title&gt;</code>中间的标题</li>
<li>按对应的结构生成<code>tree.json</code>文件</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> jsonObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> whiteList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.git'</span><span class="token punctuation">,</span> <span class="token string">'.idea'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// node_modules etc..</span>
<span class="token keyword">let</span> root <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">readdirR</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token punctuation">)</span> <span class="token keyword">return</span>
    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>file <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
      fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>whiteList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          obj<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token function">writeJson</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token function">readdirR</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

              <span class="token keyword">let</span> fileStr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/&lt;title>(.+)&lt;\/title>/</span><span class="token punctuation">;</span>
              <span class="token keyword">let</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>fileStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>fileStr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
              <span class="token keyword">let</span> title <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>fileStr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
              obj<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                title<span class="token punctuation">,</span>
                directory<span class="token punctuation">:</span> filePath
              <span class="token punctuation">}</span><span class="token punctuation">;</span>
              <span class="token function">writeJson</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            obj<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> file<span class="token punctuation">;</span>
            <span class="token function">writeJson</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">writeJson</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>root<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/tree.json`</span></span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    success <span class="token operator">&amp;&amp;</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">readdirR</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> jsonObj<span class="token punctuation">)</span>
</code></pre>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><ul>
<li><code>Object.keys(json对象).forEach</code></li>
<li>把线上地址前缀 拼接 <code>html</code>文件的路径得到URL</li>
<li>选中预览的时候用iframe来加载对应地址</li>
</ul>
<h2 id="readdirp"><a href="#readdirp" class="headerlink" title="readdirp"></a>readdirp</h2><p>开源库 <a href="https://github.com/paulmillr/readdirp" target="_blank" rel="external">readdirp</a> 支持文件类型过滤，是<code>fs.readdir</code>的递归版，执行后得到一个<code>stream</code>对象</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript异步编程的演变过程]]></title>
      <url>http://www.imaxin.cn/2018/09/14/sth/JavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h2><p>说到异步编程，就不得不谈JavaScript是单线程运行的，引擎将脚本从上到下依次执行，当然前提是都是同步代码。<br>如果当前执行一个耗时操作的话，那么后面的代码就会一直等上面执行完毕，这样一来就导致大量时间被浪费。<br>所以，如果想在耗时操作结束后做点别的事，并且不能影响与这个操作无关的代码执行，就得使用<code>回调函数</code></p>
<p>一些使用场景</p>
<ul>
<li>api接口调用</li>
<li>文件读写，I/O操作</li>
<li>大数据量的数据处理</li>
</ul>
<p>弊端：</p>
<ul>
<li><code>callback hell</code> 耗时操作结束后的回调函数又执行异步操作，嵌套下去导致代码不利于重构</li>
<li>在外层不能<code>try...catch</code>到回调函数内的报错</li>
</ul>
<p>给<code>null</code>赋值的话会报错，异步函数报错catch不到，不打印；去掉<code>setTimeout</code>直接赋值的话会打印</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token string">'你是大SB'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你说啥我听不见'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="事件监听（订阅-发布）"><a href="#事件监听（订阅-发布）" class="headerlink" title="事件监听（订阅/发布）"></a>事件监听（订阅/发布）</h2><p>事件监听/订阅发布 是常见的异步编程模式，很典型的代码逻辑分离方式，抽象出脱离业务的代码有利于代码解耦。<br></p>
<p>Node.js中<code>events</code>模块的<code>EventEmitter</code></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyEmitter</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> myEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'singsongs'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>voice<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>voice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'singsongs'</span><span class="token punctuation">,</span> <span class="token string">'lalala'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>例如在游戏服务端项目中，当人物属性变化时，需要写入到持久层。解决方案是先写一个订阅方，订阅<code>save</code>事件，在需要保存数据时让发布方对象(这里就是人物对象)上直接用emit发出一个事件名并携带相应参数，订阅方收到这个事件信息并处理。<br></p>
<p>前端应用场景：</p>
<ol>
<li>之前一个视频项目，是在APP中上传拖拽编辑完的那种图文混排（包括视频的瀑布式布局）分享出来的H5。</li>
<li>为了保证页面打开速度，首先会加载完所有的图片资源，视频是占位的缩略图，等图片加载完后，如果页面不产生滑动视频依次加载，如果滑动则可视区域中的视频会优先加载。也就是说可以维护一个栈，每项是待加载视频，写一个视频加载的方法，依次从前到后加载视频，加载完成后从栈里移除；滑动后获取屏幕内的第一个，将其前面所有的待加载视频放到栈的最后，然后继续依次加载，直至为空。</li>
<li>所有图片加载完毕后执行<code>emit(&#39;allImgLoaded&#39;)</code>，从而触发之前订阅这个事件的视频加载方法。</li>
<li>视频缩略图上的扇形进度条要根据当前视频的加载进度来变化，可以写一个订约方，订阅<code>loading</code>事件，执行独立的画canvas进度条操作，视频预加载方法中<code>onprogress</code>触发时执行<code>emit(&#39;loading&#39;)</code></li>
<li>上述场景包含很多异步操作，通过eventEmitter让逻辑更加清晰</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript">xhrItem<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    work<span class="token punctuation">.</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">,</span> elem<span class="token punctuation">,</span> event<span class="token punctuation">.</span>loaded<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>之前封装过一个前端使用的订阅发布的类 <a href="https://github.com/mx94/dailyPractice/blob/master/EventEmitter.js" target="_blank" rel="external">传送门</a> </p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>ES6中提供的原生对象，Promise对象代表了某个未来才会知道结果的事件<br>可以用同步的写法来表达异步操作，避免层层嵌套的回调，代码也相对清晰，方便维护<br>如果想一直链式写法<code>.then</code>下去的话需要<code>return</code>一个promise对象</p>
<p>按顺序读取文件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'2.txt'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'3.js'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><p>如果多个异步任务没有先后顺序依赖，可以并发执行，并且需要在所有任务执行完毕后得到结果的话，可以使用Promise.all</p>
<p>p1,p2是两个promise对象实例，获得成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即p1的结果在前，即便p1的结果获取的比p2要晚。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> wake <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time <span class="token operator">/</span> <span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒后醒来`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">wake</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">wake</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>

Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ '3秒后醒来', '2秒后醒来' ]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><p>Promise.race([p1, p2])<br>哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。还没找到这个的应用场景</p>
<h3 id="构建队列"><a href="#构建队列" class="headerlink" title="构建队列"></a>构建队列</h3><p>如果想要保证一组异步方法，按照顺序依次执行，一般每次都return一个promise对象，resolve的结果是<code>.then</code>里的回调函数第一个参数的值。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'2.txt'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'3.js'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>但是如果有很多动作执行的话，这种链式写法要写很长，此时就需要<code>构建promise任务队列</code></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">asyncFn</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'延迟'</span> <span class="token operator">+</span> delay <span class="token operator">+</span> <span class="token string">'ms后执行了'</span><span class="token punctuation">)</span>
      <span class="token function">doSomeRecording</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这里可以做记录</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> delays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> promiseAry <span class="token operator">=</span> delays<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> asyncFn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">queue</span><span class="token punctuation">(</span>proArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sequence <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  proArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    sequence <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> sequence
<span class="token punctuation">}</span>
<span class="token function">queue</span><span class="token punctuation">(</span>promiseAry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>首先构造一个数组（每项都是一个返回promise对象的函数）</li>
<li>然后手动<code>Promise.resolve()</code>返回一个可以被<code>.then()</code>的promise对象<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sequence <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
proArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
sequence <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
由于forEach是同步代码，会在当前事件循环内立即执行，而<code>.then()</code>会在当前事件循环尾部，也就是即将结束时执行，所以promise队列会在forEach执行结束后被构建完毕，然后在此次<code>Event Loop</code>结束前第一个<code>.then</code>执行，相应的数组中第一个函数执行，到该函数<code>resolve</code>后，第二个then才会执行，依次这样直至数组最后一项函数resolve完毕，从而实现按顺序执行一组异步任务。</li>
</ul>
<p>也可以使用<code>reduce</code>，原理相同。</p>
<pre class=" language-javascript"><code class="language-javascript">promiseAry<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> sequence<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p><a href="https://blog.csdn.net/qiqingjin/article/details/51921331" target="_blank" rel="external">参考1</a><br><a href="https://blog.csdn.net/ganyingxie123456/article/details/78152770" target="_blank" rel="external">参考2</a></p>
<ul>
<li>其实就是一个状态机，封装了多个状态</li>
<li>异步任务的容器，异步操作需要暂停的地方，都用yield语句</li>
<li>调用generator函数后，返回一个指向内部状态的指针对象</li>
</ul>
<p>用途：<br>输出斐波那契数列</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">[</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cur<span class="token punctuation">,</span> pre<span class="token operator">+</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> cur<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">></span> <span class="token number">1000</span> <span class="token punctuation">)</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>遍历完全二叉树</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 前序遍历</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span>  root<span class="token punctuation">.</span>mid<span class="token punctuation">;</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 中序遍历</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span>  root<span class="token punctuation">.</span>mid<span class="token punctuation">;</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 后序遍历</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span>  root<span class="token punctuation">.</span>mid<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 二叉树构造函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>mid <span class="token operator">=</span> mid<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">binaryTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 生成二叉树</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token function">binaryTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">binaryTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 完全二叉树节点</span>
<span class="token keyword">let</span> bTree <span class="token operator">=</span> <span class="token function">binaryTree</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 遍历结果</span>
<span class="token keyword">let</span> preResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> node <span class="token keyword">of</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>bTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 前序遍历结果</span>
  preResult<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>preResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// (7) ["a", "b", "d", "e", "c", "f", "g"]</span>

<span class="token keyword">let</span> inResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> node <span class="token keyword">of</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>bTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 中序遍历结果</span>
  inResult<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inResult<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// (7) ["d", "b", "e", "a", "f", "c", "g"]</span>

<span class="token keyword">let</span> postResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> node <span class="token keyword">of</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>bTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 后序遍历结果</span>
  postResult<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>postResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// (7) ["d", "e", "b", "f", "g", "c", "a"]</span>
</code></pre>
<p>部署Ajax操作</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 通过 Ajax 操作获取数据</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"http://some.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">makeAjaxCall</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>
    it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="co"><a href="#co" class="headerlink" title="co"></a>co</h3><p>顺序执行3个异步读取文件的操作，并输出文件内容</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> co <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'co'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> thunkify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'thunkify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> readFile <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> files<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token string">'./text1.txt'</span><span class="token punctuation">,</span>
    <span class="token string">'./text2.txt'</span><span class="token punctuation">,</span>
    <span class="token string">'./text3.txt'</span>
   <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' ->'</span> <span class="token operator">+</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' ->'</span> <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' ->'</span> <span class="token operator">+</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token string">'done'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>并发执行3个异步读取文件的操作，并存储在一个数组中输出(顺序和文件名相同)</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> co <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'co'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> thunkify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'thunkify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> readFile <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'./text1.txt'</span><span class="token punctuation">,</span> <span class="token string">'./text2.txt'</span><span class="token punctuation">,</span> <span class="token string">'./text3.txt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> contents <span class="token operator">=</span> <span class="token keyword">yield</span> files<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>readFileAsync<span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">readFileAsync</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>async/await是ecmascript正式的语法，而generator只是当时的一个过渡</p>
<p>按顺序读取文件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> fileReader <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">'3.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>await关键字会把后面跟的返回值转为Promise对象</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> promise </tag>
            
            <tag> async </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则]]></title>
      <url>http://www.imaxin.cn/2017/06/24/base/%E6%AD%A3%E5%88%99/</url>
      <content type="html"><![CDATA[<h4 id="正则用法："><a href="#正则用法：" class="headerlink" title="正则用法："></a>正则用法：</h4><ol>
<li>验证字符串是否符合正则所指定的规则 =&gt; 注册输入用户名密码</li>
<li>把符合规则的字符串部分从字符串捕获 =&gt; 从名字中获取到姓氏<br>ps：基本就是用来操作字符串的。<br>验证：reg.test(‘’)<br>捕获：reg.exec(‘’)</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/a/</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只要字符串中包含字母a就可以</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abdkfa'</span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="特殊的元字符"><a href="#特殊的元字符" class="headerlink" title="特殊的元字符"></a>特殊的元字符</h4><ul>
<li>\d  :   0到9之间的任意一个数字  </li>
<li>\w  :   数字字母下划线 0-9 a-z A-Z</li>
<li>\s  :   空格或者空白等(tab等)</li>
<li>\b  :   边界    =&gt;  不占位，字符串开始和结束，一些特殊字符的两边</li>
<li>\n  :   匹配一个换行</li>
<li>.   :   匹配任意字符除了\n</li>
<li>^   :   以什么开始</li>
<li>$   :   以什么结束</li>
<li>.  :   “.”本身</li>
<li>\   :   转义    =&gt;  把特殊意义的字符转变成本来的意思</li>
<li>\D  :   除了\d</li>
<li>\W  :   除了\w</li>
<li>\S  :   除了\s</li>
</ul>
<p>ps：如果”^”和”$”同时出现，那么对这个字符串的个数就限制了</p>
<h4 id="量词："><a href="#量词：" class="headerlink" title="量词："></a>量词：</h4><ul>
<li>位置放在要修饰元字符的后面 =&gt; 修饰前面的元字符出现的次数  </li>
</ul>
<p>+: 1到多个 至少1个<br>*: 0到多个<br>?: 0-1个  要么出现要么不出现<br>{n}: 出现n个<br>{n,}: 至少n个<br>{n, m}: 出现n到m个</p>
<h4 id="正则中的或者："><a href="#正则中的或者：" class="headerlink" title="正则中的或者："></a>正则中的或者：</h4><ol>
<li>x|y ： x或者y中的一个  x|y|z   由于或者关系是满足其中一个就可以，所以处理或者关系的时候我们不妨用()去改变运算的优先级。</li>
<li>[xyz]   ：   x或者y或者z中的一个</li>
<li>[^xyz]  ：  只要字符串中有一个字符不是x也不是y也不是z就行   如果为false 就是只能有x或者y或者z</li>
<li>[+-]    ：    “+” 或者 “-“中的一个</li>
<li>[\d\w]  ：  数字字母中还有下划线中的一个</li>
<li>\w  ：      [0-9a-zA-Z_]    “-“在[]代表的是到的意思</li>
<li>[.] ：     代表不是任意字符，”.”本身</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//简单的有效数字验证</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[+-]?\d+(\.\d+)?$/</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'0.555'</span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 简单的有效数字验证 ???</span>
<span class="token comment" spellcheck="true">// +5  5  -5  0.5  0.05 0.005  +0.005 -0.005  55.5  -5555.5555</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[+-]?\d+(\.\d+)?$/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"0.555"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>获得焦点：   光标  onfocus<br>失去焦点：   光标  onblur</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"input"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token comment" spellcheck="true">//非空验证</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex">/^\s*$/</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
input<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'输入不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^ | +$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//去除首尾空格</span>
</code></pre>
<h4 id="正则创建方式的区别"><a href="#正则创建方式的区别" class="headerlink" title="正则创建方式的区别"></a>正则创建方式的区别</h4><p>区别：实例和字面量</p>
<ol>
<li>如果使用实例创建，特殊元字符\d需要在创建的时刻在前面添加一个”/“</li>
<li>实例创建，new的过程中的第二个参数就是修饰符</li>
<li>只要正则中有需要变量的时候，那么就只能使用实例的创建方式<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/a/i</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\d'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span>
</code></pre>
修饰符：<br>/\d/i   =&gt;  匹配的时候忽略大小写<br>i   :   ignoreCase  忽略大小写<br>m   :   multiline   多行匹配<br>g   :   global  全局全文（一般用于捕获exec）</li>
</ol>
<h4 id="正则中的exec方法"><a href="#正则中的exec方法" class="headerlink" title="正则中的exec方法"></a>正则中的exec方法</h4><p>exec捕获结果：</p>
<ol>
<li>返回一个数组  [正则捕获回来的结果  index ： 捕获开始位置的索引， input ： 原有字符串]</li>
<li>reg.lastIndex属性 =&gt;  下一次捕获从哪个索引位置开始，当捕获结果为null这个属性值会重新赋值为0，然后就又从开始捕获了</li>
<li>match ： 1 返回一个数组； 2 把所有符合要求的一次性捕获回来<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'zf2017xyz20000'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> reg1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">=</span> reg1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'zf2017xyz20000'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h4 id="正则中的分组和分组的引用"><a href="#正则中的分组和分组的引用" class="headerlink" title="正则中的分组和分组的引用"></a>正则中的分组和分组的引用</h4><p>? 用法：<br>1) ?  量词  0-1次<br>2) (?:\d….)  放在一个分组的开头，匹配不捕获  破坏分组  </p>
<p>分组：<br>想获取到字符串中的一部分那么可以使用分组 =&gt; 在大正则中使用小括号<br>分组影响捕获结果：<br>exec捕获返回的结果数组，从第二项开始分别是分组捕获到的内容<br>分组的引用：<br>当后面出现的字符需要和前面保持一致，需要用到分组的引用。  aabb abab<br>    ps ： 括号从左到右依次出现的顺序作为分组顺序<br>    RegExp.$9 ： 保存着正则实例最后一次被使用的分组的内容</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">'421302199410040814'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^\d{6}(\d{4})\d{6}(\d)(?:\d|X)$/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">'15089786666'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(\d)\1\1\1/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4个相同的数字</span>
<span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/(\d)(\d)\1\2/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//abab</span>
</code></pre>
<h4 id="split的用法-："><a href="#split的用法-：" class="headerlink" title="split的用法 ："></a>split的用法 ：</h4><p>split的参数可以是一个正则，拆分字符串的时候会把正则匹配到的位置全部拆分，</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'a b-c d'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/[ -]/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="replace用法-："><a href="#replace用法-：" class="headerlink" title="replace用法 ："></a>replace用法 ：</h4><ol>
<li>replace返回一个新的替换好的字符串    str = str.replace()  </li>
<li>如果第二个参数是一个函数，是这个函数的返回值return来替换第一个参数所匹配到的内容<br> =&gt; 函数执行的次数取决于第一个参数正则成功匹配的次数  </li>
<li>第二个参数函数中的arguments ：<br> =&gt; [总正则在当次执行匹配到的内容，从第二项开始分别分组n…，index :…,input:]  </li>
<li>当第二个参数是”$1”字符串，如果有分组那么代表就是分组1<br>insertBefore(new, old)<br>replace(old, new)<br>replaceChild(new, old)<br>```javascript<br>var str = ‘zhu2018feng2017peixun’;<br>//str = str.replace(‘zhu’,’珠’);<br>var reg = /(\d+)/g;<br>str = str.replace(reg,function (res,$1,index,input){<br>console.log(arguments); // []<br>return ‘珠’;<br>});</li>
</ol>
<p>console.log(str);;</p>
<pre><code>```javascript
var str = &#39;abcdefg&#39;; // 遍历字符串
str.replace(/(\w)/g,function (){
    console.log(arguments[1])
});
</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'1324134'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//=> "伍叁壹贰肆"</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'零壹贰叁肆伍陆柒捌玖'</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\d/g</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5 => '伍'  4 => '肆'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'2015zhufeng'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(\d+)/g</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">'$1'</span><span class="token operator">+</span><span class="token string">'￥'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$1 是第一个分组</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'￥'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="利用replace完成几个例子"><a href="#利用replace完成几个例子" class="headerlink" title="利用replace完成几个例子"></a>利用replace完成几个例子</h4><p>把URL后面的字符串转换成为对象：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"www.baidu.com/s?wd=hh&amp;kw=xx"</span><span class="token punctuation">;</span>
String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>queryParamers <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/([^?=&amp;]+)=([^?=&amp;]+)/g</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
url<span class="token punctuation">.</span><span class="token function">queryParamers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如何找出一个字符串中出现最多的字符，出现几次？</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'aabbccdda'</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\w/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//console.log(obj);</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">></span> max <span class="token operator">?</span> max <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// => 出现最多的次数</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> max <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// => 出现最多的字符</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[组件间的通信]]></title>
      <url>http://www.imaxin.cn/2017/04/15/vue/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h3 id="组件之间的数据通信"><a href="#组件之间的数据通信" class="headerlink" title="组件之间的数据通信"></a>组件之间的数据通信</h3><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><ul>
<li>父组件要将数据传递给子组件，子组件要将内部发生的事情通知父组件</li>
<li>不能在子组件中直接调用父组件中的数据，需要通过父组件的属性传递</li>
<li>组件要显示的通过props声明传递过来的属性。</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--如果直接写--></span>
    <span class="token comment" spellcheck="true">&lt;!--动态数据使用v-bind 简写为 :--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:foods</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>meat<span class="token punctuation">"</span></span> <span class="token attr-name">:greens</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vegetables<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        meat<span class="token punctuation">:</span> <span class="token string">'猪肉'</span><span class="token punctuation">,</span>
        vegetables<span class="token punctuation">:</span> <span class="token string">'蔬菜'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        child<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foods'</span><span class="token punctuation">,</span> <span class="token string">'greens'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// foods,greens相当于是子组件的数据了</span>
            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token function">rou</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token string">'加工后的'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foods<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">/*data() { // 或者用data改变子组件的数据
                    return {meat: '加工后的' + this.foods};
                }*/</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>儿子做{{ rou }}、{{ greens }}吃  &lt;grandson :vegetables="greens">&lt;/grandson>&lt;/div>`</span></span><span class="token punctuation">,</span>
            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                grandson<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vegetables'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>孙子做{{ vegetables }}吃&lt;/div>`</span></span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="父传子时props可以验证"><a href="#父传子时props可以验证" class="headerlink" title="父传子时props可以验证"></a>父传子时props可以验证</h4><ol>
<li>required: true 表示属性必须传递</li>
<li>type: 可以使用的类型</li>
<li>default: 默认值，不传递的情况下使用默认值，传了使用传递的值</li>
<li>validator(val): val是形参 该属性传的是什么val的值就是什么,返回false校验失败<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:c</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>201<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
 data<span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
     child<span class="token punctuation">:</span> <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">// 自定义验证器</span>
         props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
             c<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                 type<span class="token punctuation">:</span> <span class="token punctuation">[</span>Number<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Boolean<span class="token punctuation">]</span><span class="token punctuation">,</span>
                 <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'待定'</span><span class="token punctuation">,</span>
                 <span class="token function">validator</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>子组件 数量{{ c }}&lt;/div>`</span></span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><blockquote>
<p>子组件需要通过事件发射($emit)触发父组件的自定义事件</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爸爸有 {{ m }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--儿子$emit后会触发自己身上的have-money方法，对应的函数是父亲身上的,儿子触发父亲的函数--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">@have-money</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>say<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        儿子有 {{ money }}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>告诉爸爸我有多少钱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>
    template<span class="token punctuation">:</span> <span class="token string">'#child'</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>money<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'have-money'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>m<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>child<span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">say</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="平级组件间的通信"><a href="#平级组件间的通信" class="headerlink" title="平级组件间的通信"></a>平级组件间的通信</h4><ol>
<li>事件车，通过事件车的方式传递数据 eventBus</li>
<li>实例上 有$emit $on</li>
<li>创建一个实例 让需要互相通信的平级组件 共用一个事件机制</li>
</ol>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bro-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bro-one</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bro-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bro-two</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> broOne <span class="token operator">=</span> <span class="token punctuation">{</span>
    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>大兄弟 &lt;button @click="sendFood">给小兄弟送吃的&lt;/button>&lt;/div>`</span></span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>food<span class="token punctuation">:</span> <span class="token string">'猪肉'</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">sendFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'送吃的'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> broTwo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 如果不处理下，这个函数中的this指定的不是broTwo</span>
        bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'送吃的'</span><span class="token punctuation">,</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>meat <span class="token operator">=</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>meat<span class="token punctuation">:</span> <span class="token string">'黄瓜'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>小兄弟吃 {{ meat }}&lt;/div>`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>broOne<span class="token punctuation">,</span> broTwo<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="子组件更改数据方式"><a href="#子组件更改数据方式" class="headerlink" title="子组件更改数据方式"></a>子组件更改数据方式</h4><ul>
<li>可以作为数据的初始值使用<pre class=" language-javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>language <span class="token operator">+</span> <span class="token string">'hello'</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li>作为子组件的computed属性<pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>language <span class="token operator">+</span> <span class="token string">'hello'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue组件]]></title>
      <url>http://www.imaxin.cn/2017/03/30/vue/vue%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ol>
<li>子组件不能直接使用父组件的数据</li>
<li>可以在子组件中自己声明数据</li>
<li>子组件定义数据必须是函数类型</li>
</ol>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--这里的模板标签名只能是用短横线连接--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">'my-component'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// // 短横线或者驼峰</span>
      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;h3>{{ msg }}&lt;/h3>`</span></span><span class="token punctuation">,</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 子组件定义数据必须是函数类型</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'world'</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="组件中的数据"><a href="#组件中的数据" class="headerlink" title="组件中的数据"></a>组件中的数据</h3><ol>
<li>声明组件的名字，不能为已存在的标签 比如名字叫 a p div</li>
<li>每个组件应该是没关系的，都应该产生自己的数据</li>
<li>在组件中使用的方法和默认的vm是一样的，只是data不再是对象而是函数</li>
<li>子组件中各个方法中的this都是子组件本身</li>
<li>组件可以无限嵌套</li>
<li>子组件要在父组件的模版中使用</li>
</ol>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--水果 > 甜的 > 西瓜--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fruit</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fruit</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    fruit<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>水果 &lt;sweet>&lt;/sweet>&lt;/div>`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      sweet<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>甜的 &lt;water-malon>&lt;/water-malon>&lt;/div>`</span></span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        waterMalon<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>西瓜&lt;/div>`</span></span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>不过一般不要像上面这样去写，嵌套的层数太多，可读性太差，把组件对应的对象提到外面写比较好</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> waterMalon <span class="token operator">=</span> <span class="token punctuation">{</span>
  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>西瓜&lt;/div>'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sweet <span class="token operator">=</span> <span class="token punctuation">{</span>
  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>甜的 &lt;water-malon>&lt;/water-malon>&lt;/div>'</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    waterMalon<span class="token punctuation">:</span> waterMalon
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>水果 &lt;sweet>&lt;/sweet>&lt;/div>`</span></span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    sweet<span class="token punctuation">:</span> sweet
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    fruit<span class="token punctuation">:</span> fruit
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>模版中的html元素的根节点只能有一个</p>
</blockquote>
<h3 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h3><ul>
<li>可以在组件内定制模板,在使用组件时会将中间传递的内容替换掉定制的模板。</li>
</ul>
<ol>
<li>单个slot<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span>
 <span class="token comment" spellcheck="true">&lt;!--这里不传入内容时默认会使用模版中定制的内容，传入后会覆盖掉定制的内容--></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>用这个盒子替换掉slot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript">components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
 <span class="token string">'my-component'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
     template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>
             &lt;slot>
                 &lt;h1>这是小标题&lt;/h1>
                 &lt;p>这是内容&lt;/p>
             &lt;/slot>
         &lt;/div>`</span></span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li>具名slot</li>
</ol>
<ul>
<li>通过组件中传入模版，每个模版指定slot名字，这个名字和定制的模版匹配到，会替换定制的模版</li>
<li>模版中指定结构位置的元素标签为 slot,对应一个name属性，并指定值</li>
<li>在页面中的组件标签里面添加内容，内容元素有一个slot属性，该slot属性的值与模版中slot标签上name属性的值一一对应</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是弹窗的底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>错误<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>出bug了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是弹窗的头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    alert<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`
        &lt;div class="alert alert-danger">
          &lt;slot name="header">&lt;/slot>
          &lt;slot>这是一个alert弹窗&lt;/slot>
          &lt;slot name="footer">&lt;/slot>
        &lt;/div>
      `</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 不能直接更改父级数据 this.type = this.type + 1</span>
<span class="token keyword">var</span> panel <span class="token operator">=</span> <span class="token punctuation">{</span>
  template<span class="token punctuation">:</span> <span class="token string">'#panel'</span><span class="token punctuation">,</span>
  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">sty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">'panel-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">/*data() {
      return {sty: 'panel-' + this.type};
  },*/</span>
  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// type类型是父类传入的类型，想要的是type是 panel-info</span>
    type<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'success'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    hasBtn<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> Boolean<span class="token punctuation">}</span><span class="token punctuation">,</span>
    author<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'sb'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> String<span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'say-title'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'maxin'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>panel<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>不指定slot名字默认名字为default,可以和具名slot同时使用</p>
</blockquote>
<h3 id="recursive-递归组件"><a href="#recursive-递归组件" class="headerlink" title="recursive 递归组件"></a>recursive 递归组件</h3><ul>
<li>自己调自己，必须要有中断条件 树 有子节点</li>
<li>默认情况下递归组件是不执行的，要指定name属性(只在局部组件中需要加)</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tree</span> <span class="token attr-name">:datas</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tree</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  datas<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'父亲'</span><span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">'大儿子'</span><span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'大孙子'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'中孙子'</span><span class="token punctuation">,</span>
            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'大曾孙'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'小曾孙'</span><span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'小孙子'</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'小儿子'</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  tree<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'tree'</span><span class="token punctuation">,</span>
    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'datas'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`
      &lt;ul>
        &lt;li>{{ datas.name }}
            &lt;tree v-for="child in datas.children" :datas="child">&lt;/tree>
        &lt;/li>
      &lt;/ul>
    `</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="is模版"><a href="#is模版" class="headerlink" title="is模版"></a>is模版</h3><ol>
<li>is可以指定当前标签内插入什么元素</li>
<li>is可以防止解析出错</li>
<li>template 没有意义 component 组件标签 is是谁就会显示哪个组件</li>
<li>radio中 默认没有绑定数据 要给value值，这个value值会映射到radio上，如果v-model和value相等则被选中</li>
</ol>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rad<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rad<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rad<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>
</code></pre>
<p>keep-alive标签是 缓存组件的上一次的状态，防止每次切换时重新渲染数据</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>rad<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    home<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      template<span class="token punctuation">:</span> <span class="token string">'&lt;div @click="changeColor" ref="h">Home&lt;/div>'</span><span class="token punctuation">,</span>
      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">changeColor</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 操作DOM的api，尽量不要使用</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>h<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// e.target.style.background = 'red'</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    list<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        template<span class="token punctuation">:</span> <span class="token string">'&lt;div>List&lt;/div>'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es5和es6中的一些好用的数组方法]]></title>
      <url>http://www.imaxin.cn/2017/03/30/vue/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>1) find方法是es6中的方法(不兼容)       查询</p>
<ul>
<li>在数组中查找，如果返回true表示找到了，找到后会将当前item返回，如果没找到则返回undefined</li>
<li>查找到后停止循环<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newB <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<p>2) map 映射 将一个数组 变成另一个模样   修改</p>
<ul>
<li>返回值是新数组，不会改变原数组，会将返回的值替换掉当前项<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'草莓'</span><span class="token punctuation">,</span> <span class="token string">'西瓜'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;li></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li>`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<p>3) filter过滤 返回一个新数组</p>
<ul>
<li>在函数中返回true表示这一项留下,返回false表示这一项删除掉<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newA <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果想删除某一项 都用!=</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newA<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
4) for in/forEach/for of的区别</li>
<li>for in<ol>
<li>key是字符串类型的</li>
<li>for in会遍历私有和公有属性(不想遍历的私有属性也会被遍历出来)</li>
</ol>
</li>
<li>for of<ol>
<li>可以跳出循环 </li>
<li>只会遍历数组中的内容 </li>
<li>缺点 不能遍历对象<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jw'</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// value代表数组的每一项</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以跳出循环</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ol>
</li>
</ul>
<p>5) reduce 收敛</p>
<ul>
<li>返回的结果是 多次叠加后的操作，你可以自己制定首次默认的第一项是多少<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>prev<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//上一个默认是数组的第一项，下一个默认是数组的第二项</span>
  <span class="token comment" spellcheck="true">//上一个变成第一次返回的结果，下一个就是第三项</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> prev<span class="token operator">+</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>二维数组  二维数组扁平化<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'广州'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//=> ['北京'，'上海','广州']</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>prev<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// prev ['北京'] next['上海']</span>
  <span class="token comment" spellcheck="true">// prev['北京','上海'] next['广州']</span>
  <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue基本语法]]></title>
      <url>http://www.imaxin.cn/2017/03/30/vue/vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ol>
<li>data是数据 可以是任意类型（函数不要在这里声明）</li>
<li>循环数组，要循环谁，就在谁身上写v-for, 可以使用 in 或者 of</li>
<li>可以遍历数组 字符串 对象</li>
</ol>
<h3 id="event事件"><a href="#event事件" class="headerlink" title="event事件"></a>event事件</h3><ol>
<li>根组件，在vue中操作的都是数据 不是DOM元素</li>
<li>v-on代表的是指令可以用来绑定事件,绑定事件执行括号，不需要传递参数则不加 v-on:keyup=”addFruits”</li>
<li>v-on:keyup 可以简写为 @keyup</li>
<li>在vue中methods中的方法里的this指向都是vm(实例)</li>
<li>如果写绑定的函数加 () 需要手动传入事件源$event</li>
<li>v-show 操作的是css样式，如果不满足条件则display: none</li>
<li>v-if操作的dom元素，默认不满足条件时 dom不存在，满足后则增加dom元素</li>
<li>频繁操作显示和隐藏，使用v-show</li>
</ol>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ol>
<li>按键修饰符，vue提供了大量的按键修饰符 space esc left right … 可以用keyCode代替</li>
<li>a: 65  enter: 13</li>
<li>当keyCode 等于写的值的时候触发事件</li>
<li>事件冒泡: 阻止冒泡 .stop<br>事件捕获: 将事件模式变成捕获 .capture<br>只自己触发: .self<br>阻止默认事件: .prevent</li>
<li>修饰符可以累加使用</li>
<li>.once 绑定一次，执行一次后解绑事件</li>
<li>绑定动态数据用v-bind 简写 :</li>
</ol>
<h3 id="动态绑定class-style-样式"><a href="#动态绑定class-style-样式" class="headerlink" title="动态绑定class style 样式"></a>动态绑定class style 样式</h3><ol>
<li>动态绑定的class和原生的class 可以共存,动态覆盖静态</li>
<li>对象绑定方式  {样式：条件，样式1：条件}</li>
<li>数组绑定方式</li>
<li>对象 + 数组</li>
<li>绑定动态属</li>
<li>动态绑定的class和原生的class 可以共存,动态覆盖静态</li>
</ol>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>back<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{font:flag}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>红色背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[b, {font:flag}, <span class="token punctuation">'</span>box<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>红色背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token string">'green'</span>,<span class="token property">fontSize</span><span class="token punctuation">:</span><span class="token string">'50px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绿色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[s<span class="token number">1</span>, s<span class="token number">2</span>]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>行内样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        flag<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        b<span class="token punctuation">:</span> <span class="token string">'back'</span><span class="token punctuation">,</span>
        c<span class="token punctuation">:</span> <span class="token string">'font'</span><span class="token punctuation">,</span>
        s1<span class="token punctuation">:</span> <span class="token punctuation">{</span>background<span class="token punctuation">:</span> <span class="token string">'limegreen'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        s2<span class="token punctuation">:</span> <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'yellow'</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h3><ol>
<li>计算”属性” 不是方法 可以根据已有属性 推断出一个新的属性来<pre><code>{{ sum() }}
</code></pre><blockquote>
<p>如果这样绑定，时刻监听 数据的变化，只要有数据边，不管和sum函数有没有关系都会执行</p>
</blockquote>
</li>
<li>计算属性，根据某个值计算出新值，当这个值变化后会重新计算，别的数据改变不会收到影响<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 {{ sum }}
 价格 {{ price }}
 数量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 名字 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
 data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
     price<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
     count<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
     name<span class="token punctuation">:</span> <span class="token string">'飞机'</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">// sum属性由两部分组成 （获取，设置）</span>
     sum<span class="token punctuation">:</span> <span class="token punctuation">{</span>
         <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 展示就是获取</span>
             <span class="token comment" spellcheck="true">// 如果price和count变化会导致 sum变化</span>
             <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// vm.sum = 100;</span>
             <span class="token comment" spellcheck="true">// sum变化有可能会改变name变化，computed属性中this依然是vm</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h3 id="全选和反选"><a href="#全选和反选" class="headerlink" title="全选和反选"></a>全选和反选</h3><ol>
<li>点击全选可以控制 下面的所有checkbox，如果有一个chekbox没选中 全选为不选中状态</li>
<li>全选的值依赖于下面的checkbox，如果都为true则选中，给全选赋值要改变下面的checkbox的值<pre><code>全选 &lt;input type=&quot;checkbox&quot; v-model=&quot;checkAll&quot;&gt;&lt;br&gt;
 &lt;input type=&quot;checkbox&quot; v-for=&quot;check in checkList&quot; v-model=&quot;check.isChecked&quot;&gt;
</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
 data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
     checkList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
     checkAll<span class="token punctuation">:</span> <span class="token punctuation">{</span>
         <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checkList<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                 <span class="token keyword">return</span> item<span class="token punctuation">.</span>isChecked<span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checkList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 v<span class="token punctuation">.</span>isChecked <span class="token operator">=</span> val<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>
        content<span class="token punctuation">:</span> <span class="token string">''</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">message</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">'等待中...'</span><span class="token punctuation">;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                vm<span class="token punctuation">.</span>content <span class="token operator">=</span> newValue <span class="token operator">+</span> <span class="token string">', maxin'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ol>
<li>computed 适合做复杂逻辑，简单的只能给watch,当一个值改变触发某件事时，使用watch</li>
<li>如果是”异步”并且有”中间过程”，用watch</li>
<li>methods watch computed 区别</li>
</ol>
<blockquote>
<p>一般来说watch方法只能监听一级,如果需要深度监听</p>
</blockquote>
<pre><code>watch(){
    todos: {
        handler(){
            // 将todos存到本地 设置key和value, value会被自动toString
            localStorage.setItem(&#39;todos&#39;, JSON.stringify(this.todos));
        },
        deep: true  // 深度监控,只要todos有变化，就会执行此监控
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM库及常用方法封装]]></title>
      <url>http://www.imaxin.cn/2016/10/29/base/dom/</url>
      <content type="html"><![CDATA[<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><pre><code>         nodeType     nodeName       nodeValue
元素节点     1       大写的标签名      null
文本节点     3          #text         文本内容
注释节点     8         #comment       注释内容
document     9          #document      null
</code></pre><h3 id="DOM元素的增、删、改、移动"><a href="#DOM元素的增、删、改、移动" class="headerlink" title="DOM元素的增、删、改、移动"></a>DOM元素的增、删、改、移动</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="添加："><a href="#添加：" class="headerlink" title="添加："></a>添加：</h4><p>容器.appendChild(元素)<br>将元素添加到指定容器的末尾</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
title<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'woshi nibaba'</span><span class="token punctuation">;</span>
father<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>容器.insertBefore(新元素,旧元素)<br>在指定容器内 将新元素插入到旧元素的前面</p>
<pre class=" language-javascript"><code class="language-javascript">father<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newTit<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="移除："><a href="#移除：" class="headerlink" title="移除："></a>移除：</h4><p>容器.removeChild(元素)<br>在指定容器内 删除元素节点</p>
<pre class=" language-javascript"><code class="language-javascript">father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="替换："><a href="#替换：" class="headerlink" title="替换："></a>替换：</h4><p>容器.replaceChild(新元素，旧元素)<br>在指定容器内 用新元素替换掉 旧元素</p>
<pre class=" language-javascript"><code class="language-javascript">box<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> father<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>联想：参数是新，旧的函数，基本都是新的在前，旧的在后，唯有字符串方法的 str.replace() 第一个参数是旧的(str中的待替换的字符串或者相应的正则表达式),第二个参数是新的(替换成什么)</p>
</blockquote>
<h4 id="克隆："><a href="#克隆：" class="headerlink" title="克隆："></a>克隆：</h4><p>要克隆的元素.cloneNode()<br>返回值就是克隆后的元素,默认只克隆当前元素 不会克隆子孙后代元素，如果为cloneNode(true) 则会克隆当前元素及子孙后代元素</p>
<h4 id="移动"><a href="#移动" class="headerlink" title="移动:"></a>移动:</h4><p>利用DOM映射的特性</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    setTimeout(function(){
        outer.appendChild(inner);
    }, 2000)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h3><p>创建：<br>目标对象.setAttribute(“属性名”,”属性值”)<br>会显示在html元素的标签内</p>
<p>获取：<br>目标对象.getAttribute(“属性名”)</p>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>obj.name=”xxx<br>不会显示在html中</p>
<blockquote>
<p>联想：jquery中获取表单元素自带的属性，比如checked等，需要使用ele.prop(‘checked’)，ele.prop(‘checked’, ‘checked’); 不能用attr()，attr一般用于自己添加的属性节点。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 创建文档碎片</span>
<span class="token keyword">var</span> frg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="DOM库"><a href="#DOM库" class="headerlink" title="DOM库"></a>DOM库</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**
 * Created by maxin on 2016/10/26.
 */</span>

<span class="token keyword">var</span> kirin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> isStanderBrowser <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 类数组转换为数组
     * @param likeAry
     * @returns {*} 数组
     */</span>
    <span class="token keyword">function</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>likeAry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>likeAry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> likeAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ary<span class="token punctuation">[</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> likeAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/*  JSON字符串转换为为JSON对象
     *   @params: JSON字符串
     *   @return: JSON对象
     * */</span>
    <span class="token keyword">function</span> <span class="token function">jsonParse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> window<span class="token punctuation">.</span>JSON <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> jsonStr <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取或者设置浏览器盒子模型的属性值
     * @param attr 属性
     * @param value 值
     * @returns 只传属性就是获取值，都传就是设置
     */</span>
    <span class="token keyword">function</span> <span class="token function">win</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 求元素相对于body的偏移量
     * @param ele 元素
     * @returns {{left: 左偏移, top: 上偏移}}
     */</span>
    <span class="token keyword">function</span> <span class="token function">offset</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        l <span class="token operator">+</span><span class="token operator">=</span> ele<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
        t <span class="token operator">+</span><span class="token operator">=</span> ele<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
        <span class="token keyword">var</span> par <span class="token operator">=</span> ele<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>par<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l <span class="token operator">+</span><span class="token operator">=</span> par<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> par<span class="token punctuation">.</span>clientLeft<span class="token punctuation">;</span>
            t <span class="token operator">+</span><span class="token operator">=</span> par<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> par<span class="token punctuation">.</span>clientTop<span class="token punctuation">;</span>
            par <span class="token operator">=</span> par<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>left<span class="token punctuation">:</span> l<span class="token punctuation">,</span> top<span class="token punctuation">:</span> t<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取元素已经生成的样式值，兼容IE
     * @param ele 元素
     * @param attr 想要获取样式的属性
     * @returns {Number} 样式值
     */</span>
    <span class="token keyword">function</span> <span class="token function">getCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ie</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                val <span class="token operator">=</span> ele<span class="token punctuation">.</span>currentStyle<span class="token punctuation">.</span>filter<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// alpha(opacity=55.5)</span>
                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^alpha\(opacity=(\d+(?:\.\d+)?)\)$/</span><span class="token punctuation">;</span>
                val <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                val <span class="token operator">=</span> ele<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^-?\d+(\.\d+)?(px)?$/</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">:</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 设置盒子模型的css样式
     * @param ele 元素
     * @param attr 元素样式属性名
     * @param value 设置的值
     */</span>
    <span class="token keyword">function</span> <span class="token function">setCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> value<span class="token punctuation">;</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">'alpha(opacity='</span> <span class="token operator">+</span> value <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'float'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssFloat <span class="token operator">=</span> value<span class="token punctuation">;</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>styleFloat <span class="token operator">=</span> value<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//ielow</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/width|height|top|left|right|bottom|(margin|padding)(Left|Right|Top|Bottom)?/</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                value <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 根据类名获取元素(兼容ielow)
     * @param className 类名
     * @param context 确定查询范围,不传是document
     * @returns {*} 返回符合的元素集合
     */</span>
    <span class="token keyword">function</span> <span class="token function">getElesByClass</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        context <span class="token operator">=</span> context <span class="token operator">||</span> document<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// for ielow</span>
        <span class="token keyword">var</span> classNameAry <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^ +| +$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ +/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> tags <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> curTag <span class="token operator">=</span> tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> isGoodTag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> classNameAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> curClass <span class="token operator">=</span> classNameAry<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^| +)'</span> <span class="token operator">+</span> curClass <span class="token operator">+</span> <span class="token string">'( +|$)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>curTag<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    isGoodTag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            isGoodTag <span class="token operator">&amp;&amp;</span> ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 批量设置元素样式
     * @param ele 元素
     * @param group {width: 100px, float: left}
     */</span>
    <span class="token keyword">function</span> <span class="token function">setGroupCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> key<span class="token punctuation">,</span> group<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 把getCss、setCss、setGroupCss集成为一个方法
     * @param ele 元素名
     * @returns {Number} 如果是获取样式,就返回样式值
     */</span>
    <span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> secondParam <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> thirdParam <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> secondParam <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> thirdParam <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">getCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> secondParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">setCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> secondParam<span class="token punctuation">,</span> thirdParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        secondParam <span class="token operator">=</span> secondParam <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>secondParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setGroupCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> secondParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取n到m间的随机整数
     * @param n
     * @param m
     * @returns {number}
     */</span>
    <span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 判断元素是否有一个类名
     * @param ele
     * @param className
     * @returns {boolean}
     */</span>
    <span class="token keyword">function</span> <span class="token function">hasClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^| +)'</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">'( +|$)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 给元素添加类
     * @param ele
     * @param className
     */</span>
    <span class="token keyword">function</span> <span class="token function">addClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> classAry <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^ +| +$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ +/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> classAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ele<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' '</span> <span class="token operator">+</span> classAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 给元素移除类
     * @param ele
     * @param className
     */</span>
    <span class="token keyword">function</span> <span class="token function">removeClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> classAry <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^ +| +$/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ +/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> curClass <span class="token operator">=</span> classAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> curClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^| +)'</span> <span class="token operator">+</span> curClass <span class="token operator">+</span> <span class="token string">'( +|$)'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ele<span class="token punctuation">.</span>className <span class="token operator">=</span> ele<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取上一个哥哥元素节点
     * @param ele
     * @returns {*}
     */</span>
    <span class="token keyword">function</span> <span class="token function">prev</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> pre <span class="token operator">=</span> ele<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取下一个弟弟元素节点
     * @param ele
     * @returns {*}
     */</span>
    <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> nex <span class="token operator">=</span> ele<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nex <span class="token operator">&amp;&amp;</span> nex<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nex <span class="token operator">=</span> nex<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取所有哥哥元素节点
     * @param ele
     * @returns {Array.&lt;*>}
     */</span>
    <span class="token keyword">function</span> <span class="token function">prevAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> pre <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pre <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取所有弟弟元素节点
     * @param ele
     * @returns {Array}
     */</span>
    <span class="token keyword">function</span> <span class="token function">nextAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> nex <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nex <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>nex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取所有兄弟元素节点
     * @param ele
     * @returns {Array.&lt;*>}
     */</span>
    <span class="token keyword">function</span> <span class="token function">siblings</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">prevAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">nextAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取当前元素的索引
     * @param ele
     * @returns {Number}
     */</span>
    <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">prevAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">function</span> <span class="token function">children</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ary <span class="token operator">=</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> childs <span class="token operator">=</span> ele<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tagName <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeName <span class="token operator">!==</span> tagName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    i<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        listToArray<span class="token punctuation">:</span> listToArray<span class="token punctuation">,</span>
        jsonParse<span class="token punctuation">:</span> jsonParse<span class="token punctuation">,</span>
        win<span class="token punctuation">:</span> win<span class="token punctuation">,</span>
        offset<span class="token punctuation">:</span> offset<span class="token punctuation">,</span>
        getCss<span class="token punctuation">:</span> getCss<span class="token punctuation">,</span>
        setCss<span class="token punctuation">:</span> setCss<span class="token punctuation">,</span>
        css<span class="token punctuation">:</span> css<span class="token punctuation">,</span>
        getElesByClass<span class="token punctuation">:</span> getElesByClass<span class="token punctuation">,</span>
        getRandom<span class="token punctuation">:</span> getRandom<span class="token punctuation">,</span>
        hasClass<span class="token punctuation">:</span> hasClass<span class="token punctuation">,</span>
        addClass<span class="token punctuation">:</span> addClass<span class="token punctuation">,</span>
        removeClass<span class="token punctuation">:</span> removeClass<span class="token punctuation">,</span>
        prev<span class="token punctuation">:</span> prev<span class="token punctuation">,</span>
        next<span class="token punctuation">:</span> next<span class="token punctuation">,</span>
        prevAll<span class="token punctuation">:</span> prevAll<span class="token punctuation">,</span>
        nextAll<span class="token punctuation">:</span> nextAll<span class="token punctuation">,</span>
        siblings<span class="token punctuation">:</span> siblings<span class="token punctuation">,</span>
        index<span class="token punctuation">:</span> index<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> children
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端优化]]></title>
      <url>http://www.imaxin.cn/2016/04/06/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<ol>
<li>主动释放堆内存</li>
<li>减少http请求次数</li>
<li>CDN、雪碧图、合并css、js</li>
<li>延迟加载</li>
<li>Ajax 异步加载数据</li>
<li>动画能用css3就不要用JS写</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js面向对象]]></title>
      <url>http://www.imaxin.cn/2016/02/06/base/oop/</url>
      <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>命名空间</li>
<li>惰性函数</li>
<li>模块化开发</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> searchRender <span class="token operator">=</span> <span class="token punctuation">{</span>
    change<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    clickEvent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>likeAry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        listToArray<span class="token punctuation">:</span> listToArray
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="构造函数-类-模式"><a href="#构造函数-类-模式" class="headerlink" title="构造函数(类)模式 :"></a>构造函数(类)模式 :</h3><p>构造函数模式的目的就是为了创建一个自定义类，并且创建这个 类的实例。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">JsProgrammer</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>writeJs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'My name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' ~~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsProgrammer</span><span class="token punctuation">(</span><span class="token string">'马鑫'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">writeJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsProgrammer</span><span class="token punctuation">(</span><span class="token string">'蝙蝠侠'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p2<span class="token punctuation">.</span><span class="token function">writeJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>writeJs <span class="token operator">===</span> p2<span class="token punctuation">.</span>writeJs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->false</span>
</code></pre>
<ol>
<li>形成一个私有的作用域，然后 形参赋值-&gt; 预解释-&gt;代码从上到下执行(类和普通函数一样，它也 有普通函数的一面)</li>
<li>代码执行之前，不用再手动的创建对象了， 浏览器会默认的创建一个对象数据类型的值(这个对象 其实就是当前类的一个实例).接下来代码从上到下执行，以当前的实例为执行的主体 (this代表的就是当前的实例)，然后分别的把属性名 和属性值赋值给当前的实例。最后浏览器会默认的把 创建的实例返回<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true">//this->f1</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//this->需要看getX执行的时候才知道</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
f1<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->方法中的this是f1 ->100</span>
<span class="token keyword">var</span> ss <span class="token operator">=</span> f1<span class="token punctuation">.</span>getX<span class="token punctuation">;</span>
<span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->方法中的this是window ->undefined</span>
</code></pre>
</li>
<li>在构造函数模式中new Fn()执行，如果Fn不需要传递参数的 话，后面的小括号可以省略。</li>
<li>this的问题：在类中出现的this.xxx=xxx中的this都是当前 类的实例，而某一个属性值（方法），方法中的this需要看 方法执行的时候，前面是否有“.”才能知道this是谁</li>
<li><p>类有普通函数的一面，当函数执行的时候，var num 其实只 是当前形成的私有作用域中的私有变量而已，它和f1这个实 例没有任何的关系；只有this.xxx=xxx才相当于给f1这个实 例增加私有的属性和方法，才和f1有关系···</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->undefined</span>
</code></pre>
</li>
<li><p>在构造函数模式中，浏览器会默认的把实例返回（返回的是一 个对象数据类型的值）；如果我们自己手动写了return返回：<br> 1) 返回的是一个基本数据类型的值，当前实例是不变的，<br> 2) 返回的是一个引用数据类型的值，当前的实例会被自己 返回的值给替换掉</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"马鑫"</span><span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->{name: "马鑫"}</span>
</code></pre>
</li>
<li><p>检测某一个实例是否属于这个类 -&gt; instanceof</p>
</li>
</ol>
<ul>
<li>每一个数组都是Array这个类的一个实例</li>
<li>每一个函数都是Function这个类的一个实例，无论是实名还是匿名自运行<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->true</span>
</code></pre>
因为所有的实例都是对象数据类型的，而每一个对象数据类型都是Object这个内置类的一个实例，所以f1也是它的一个实例</li>
</ul>
<ol>
<li><p>f1和f2都是Fn这个类的一个实例，都拥有x和getX两个属性，但是这两个属性是各自的私有的属性。<br>1)  in: 检测某一个属性是否属于这个对象(attr in object),不管是私有还是公有的属性只要存在，用in检测都是true<br>2)  hasOwnProperty: 用来检测某一个属性是否为这个对象的”私有属性”，这个方法只能检测私有的属性</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>getX <span class="token operator">===</span> f2<span class="token punctuation">.</span>getX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getX"</span> <span class="token keyword">in</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'getX'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->true</span>
</code></pre>
</li>
<li><p>检测某一个属性是否为该对象的”公有属性”？</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hasPubProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>attr <span class="token keyword">in</span>  obj <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasPubProperty</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token string">'getX'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->false</span>
</code></pre>
</li>
<li><p>函数的多重性</p>
</li>
</ol>
<ul>
<li>普通函数  </li>
<li>构造函数(类) </li>
<li>Function这个类的一个实例</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 继承 封装 多态 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于this]]></title>
      <url>http://www.imaxin.cn/2016/02/06/base/this/</url>
      <content type="html"><![CDATA[<h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><p>只有函数执行才能确定this，this是谁和函数在哪定义的和在哪执行的都没有任何的关系。</p>
<h3 id="区分this"><a href="#区分this" class="headerlink" title="区分this"></a>区分this</h3><ol>
<li>当前函数执行，首先看函数名前面是否有“.”，有的话， “.”前面是谁this就是谁；没有的话this就是window</li>
<li>自执行函数(IIFE)中的this永远是window (严格模式下是undefined)</li>
<li>给元素的某一个事件绑定方法，当事件触发的时候，执行对应的方法，方法中的this是当前的元素</li>
<li>在构造函数模式中，类（函数体）中出现的this.xxx中的this是当前类的一个实例</li>
<li>定时器函数中的this一般是window (严格模式下是undefined)</li>
<li>回调函数中的this一般也是window (严格模式下是undefined)</li>
<li>call、apply、bind都可以强制修改this<br>ps：this只要被其他函数包含，那么this也随之改变了</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name <span class="token punctuation">:</span> <span class="token string">'zf'</span><span class="token punctuation">,</span>
    fun <span class="token punctuation">:</span> print
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span>print<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ary[0]()</span>

window<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//this => window</span>
obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this => obj</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this => ary</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//fn();</span>
<span class="token comment" spellcheck="true">//obj.fn();</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> fn <span class="token punctuation">:</span> fn <span class="token punctuation">}</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.length</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> main <span class="token operator">=</span> <span class="token punctuation">{</span>
    fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>
        arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    length <span class="token punctuation">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>

main<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj</span>
        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="this-和作用域"><a href="#this-和作用域" class="headerlink" title="this 和作用域"></a>this 和作用域</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7 10</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 7</span>
    fn <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只在obj的赋值过程执行一次</span>
        <span class="token comment" spellcheck="true">// var num = 6 7 8</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.num += 2;</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.num += 3     obj.num += 3;</span>
            num<span class="token operator">++</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 对象赋值的过程中，全局变量num修改成了7，私有作用域内的num变成6</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局变量fn和obj.fn共同引用自运行函数的返回值。</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 7</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[</span><span class="token comment" spellcheck="true">/*100*/</span><span class="token comment" spellcheck="true">/*,200*/</span><span class="token comment" spellcheck="true">/*,300*/</span><span class="token comment" spellcheck="true">/*,400*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  eeefff000
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    ary <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// [100]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>fun <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//obj.fn = eeefff111</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// var ary = eeefff000;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ary <span class="token operator">=</span> ary<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.ary = ary;</span>
    ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// eeefff111</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.ary.length--</span>
        ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [100] []</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span>fun<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// f = eeefff111</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this => window</span>
obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [], [100]</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->65</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->85</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>num<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->240、 120</span>
</code></pre>
<p>把全局变量num的值20赋值给了自执行函数的形参，而不是obj下的30，如果想是obj下的30，需要写obj.num</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包机制及应用]]></title>
      <url>http://www.imaxin.cn/2016/02/06/base/%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>引用数据类型赋值过程 :</p>
<ol>
<li>浏览器先给开辟一块堆内存</li>
<li>如果是对象那么就把键值对当字符串存入到这个内存中，如果是函数那么就把函数体内的代码当作字符串存入内存中</li>
<li>最后把这个地址返回</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>
    total <span class="token operator">=</span>  num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 => 3</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    num1 <span class="token punctuation">:</span> obj<span class="token punctuation">.</span>num
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Cannot read property 'num' of undefined</span>
</code></pre>
<p>在赋值的过程中不能使用obj当前变量</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>当函数执行的时候，就会形成一个私有作用域(栈),这个私有作用域保护私有变量不受外界干扰的这种机制就叫闭包。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
    <span class="token punctuation">}</span>
    <span class="token function">bar</span><span class="token punctuation">(</span> baz <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 妈妈快看呀， 这就是闭包！</span>
<span class="token punctuation">}</span>
</code></pre>
<p>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到闭包。把内部函数 baz 传递给 bar， 当调用这个内部函数时（ 现在叫作 fn），它涵盖的 foo() 内部作用域的闭包就可以观察到了， 因为它能够访问 a。</p>
<p>传递函数也可以是间接的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    fn <span class="token operator">=</span> baz<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 baz 分配给全局变量</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这就是闭包！</span>
<span class="token punctuation">}</span> 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<p>无论通过何种手段将内部函数传递到所在的词法作用域以外， 它都会持有对原始定义作用域的引用， 无论在何处执行这个函数都会使用闭包。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token function">wait</span><span class="token punctuation">(</span> <span class="token string">"Hello, closure!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>wait(..) 执行 1000 毫秒后， 它的内部作用域并不会消失,timer 函数依然保有 wait(..)作用域的闭包。</p>
<blockquote>
<p>如果将函数（ 访问它们各自的词法作用域） 当作第一级的值类型并到处传递， 你就会看到闭包在这些函数中的应用。 在定时器、 事件监听器、Ajax 请求、 跨窗口通信、 Web Workers 或者任何其他的异步（ 或者同步） 任务中， 只要使用了回调函数， 实际上就是在使用闭包！</p>
</blockquote>
<h4 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域， 使得延迟函数的回调可以将新的作用域封闭在每个迭代内部， 每个迭代中都会含有一个具有正确值的变量供我们访问。</p>
<p>还可以用ES6中的let</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="惰性函数与模块"><a href="#惰性函数与模块" class="headerlink" title="惰性函数与模块"></a>惰性函数与模块</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> MyModules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> modules<span class="token punctuation">[</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> impl<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> impl<span class="token punctuation">,</span> deps <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        define<span class="token punctuation">:</span> define<span class="token punctuation">,</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">get</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这段代码的核心是 modules[name] = impl.apply(impl, deps)。 为了模块的定义引入了包装函数（ 可以传入任何依赖）， 并且将返回值， 也就是模块的 API， 储存在一个根据名字来管理的模块列表中。</p>
<p>使用它来定义模块：</p>
<pre class=" language-javascript"><code class="language-javascript">MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Let me introduce: "</span> <span class="token operator">+</span> who<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        hello<span class="token punctuation">:</span> hello
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> hungry <span class="token operator">=</span> <span class="token string">"hippo"</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span> hungry <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
    awesome<span class="token punctuation">:</span> awesome
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span> <span class="token string">"bar"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span> <span class="token string">"foo"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span> <span class="token string">"hippo"</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Let me introduce: hippo</span>
foo<span class="token punctuation">.</span><span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// LET ME INTRODUCE: HIPPO</span>
</code></pre>
<p>“foo” 和 “bar” 模块都是通过一个返回公共 API 的函数来定义的。 “foo” 甚至接受 “bar” 的示例作为依赖参数， 并能相应地使用它。<br>ES6中用import、export</p>
<h3 id="作用域-栈-不释放"><a href="#作用域-栈-不释放" class="headerlink" title="作用域(栈)不释放"></a>作用域(栈)不释放</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个tatal=120就被保存下来了</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 120</span>
        total <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fn函数中的120既然被保存下来了，那么就可以被修改。</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 220</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>全局变量f占用return出来的匿名函数，符合fn执行形成的作用域不被释放的条件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> xx <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">fyy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span>yy <span class="token operator">=</span> fyy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如果不return出来，那么可以到函数内部去占用这个返回值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#div1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dom对象</span>
<span class="token comment" spellcheck="true">// typeof div1</span>
<span class="token keyword">function</span> <span class="token function">fzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token keyword">function</span> <span class="token function">zz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自身累加1</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/*
    *  div1的onclick属性占用fzz函数中zz函数
    *  fzz函数执行的时候形成的作用域没有释放
    *  count的值就被保存下来了
    */</span>
    div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> zz<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div1<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1  => 主动触发这个事件</span>
div1<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
div1<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token comment" spellcheck="true">// 点击的时刻可以继续执行下去</span>

div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>在绑定事件过程中，也有可能和作用域不释放参合在一起</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>不立刻释放作用域</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中的事件机制]]></title>
      <url>http://www.imaxin.cn/2016/02/06/base/JS%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="鼠标事件对象："><a href="#鼠标事件对象：" class="headerlink" title="鼠标事件对象："></a>鼠标事件对象：</h3><h4 id="产生："><a href="#产生：" class="headerlink" title="产生："></a>产生：</h4><p>标准浏览器中事件对象e存在于绑定的函数中，在ie8-中这个事件对象在window.event属性上。<br>e = e || window.event</p>
<p>clientX：鼠标点击位置相对于窗口的X轴坐标<br>clientY： 鼠标点击位置相对于窗口的Y轴坐标</p>
<h4 id="事件兼容"><a href="#事件兼容" class="headerlink" title="事件兼容"></a>事件兼容</h4><p>事件对象：</p>
<pre class=" language-javascript"><code class="language-javascript">e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event
</code></pre>
<p>事件源：</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token punctuation">.</span>target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>
</code></pre>
<p>e.pageX: 鼠标位置相对于页面的X轴坐标<br>e.pageY: 鼠标位置相对于页面的Y轴坐标</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token punctuation">.</span>pageX <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">||</span> e<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span>pageY <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">||</span> e<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>阻止默认行为:</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token punctuation">.</span>preventDefault <span class="token operator">?</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[作用域不释放]]></title>
      <url>http://www.imaxin.cn/2016/02/06/base/%E6%A0%88%E5%86%85%E5%AD%98%E4%B8%8D%E9%87%8A%E6%94%BE/</url>
      <content type="html"><![CDATA[<p>关于作用域不释放的小练习：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->25</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->28</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->27</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->29</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->30</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//->9</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->21</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->32</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->21</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->31</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1] => []</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">{</span>
    z<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1]</span>
    z<span class="token punctuation">[</span>z<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,3]</span>
    <span class="token comment" spellcheck="true">//var z;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">fx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> f3 <span class="token operator">=</span> f2<span class="token punctuation">;</span>
<span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f1 <span class="token operator">=</span> f3<span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//2324345</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        n <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n*=2  n = n + n</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> foo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个f占用的是fn(第一次)执行的返回值</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个f占用fn(第二次)执行的返回值</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>
<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>

f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从这行代码开始f占用第四次fn执行返回值,和第一次已经脱离关系</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f <span class="token operator">=</span> f1<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 40</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> fx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sum函数第一次执行返回的那个匿名函数</span>
<span class="token function">fx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>

<span class="token keyword">var</span> fy <span class="token operator">=</span> fx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把fx拿到的第一次那个匿名函数的地址告诉fy一个。</span>
<span class="token function">fy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此刻fy函数执行和fx执行的效果完全一样</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    fn <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> f<span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//6789</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 作用域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[变量提升]]></title>
      <url>http://www.imaxin.cn/2016/02/06/base/variable_hosting/</url>
      <content type="html"><![CDATA[<h3 id="预解释"><a href="#预解释" class="headerlink" title="预解释"></a>预解释</h3><p><code>undefined</code>:</p>
<ol>
<li>读取一个对象根本不存在的属性</li>
<li>定义形参执行的时候没有传参数</li>
<li>如果函数没有写return那么默认返回undefined</li>
<li>在预解释的时刻，var声明的变量在赋值之前是undefined</li>
</ol>
<p>预解释发生在哪里</p>
<blockquote>
<ul>
<li>使用var关键字声明的变量</li>
<li>使用function 关键字声明的函数<br>区别： var只声明但是没有赋值，默认undefined。使用function声明的函数在预解释阶段就已经赋值结束</li>
</ul>
</blockquote>
<p>私有变量和全局变量</p>
<blockquote>
<ul>
<li>私有变量 ： 定义在函数体内部的变量</li>
<li>全局变量 ： 定义在全局作用域内(没有任何函数包含的变量)</li>
</ul>
</blockquote>
<p>私有作用域和全局作用域:</p>
<blockquote>
<ul>
<li>私有作用域 ： 只要函数运行就会形成一个私有作用域</li>
<li>全局作用域 ：  只要打开一个网页就会形成全局作用域</li>
</ul>
</blockquote>
<p>函数的执行过程 ： </p>
<blockquote>
<ul>
<li>形成私有作用域(栈内存)</li>
<li>形参赋值（形参也相当于在函数体内部声明的私有变量）</li>
<li>预解释函数体内部的var和function</li>
<li>代码执行</li>
</ul>
<p>堆内存 :   用来存储引用数据类型值占用的内存是堆内存<br>栈内存 ： 代码运行时刻占用的内存是栈内存。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined => 打印并没有报错，说明num已经被声明过。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数体 => 说明赋值也结束了</span>

<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arguments<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//console.log(fn);</span>
    <span class="token comment" spellcheck="true">//console.log(num2);</span>
    num2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    num2 <span class="token operator">=</span> num2 <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">var</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 私有变量 定义在函数内部的变量</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此刻执行也只是把foo内部自己的私有num2修改。全局依然是100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [100,200,300]</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// a 获取到的就是[100,200]这个数组的引用地址</span>
    a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 操作的就是传进来引用地址所对应的那个数组a => [100,200,300]</span>
    a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回一个和原数组相同的数组（新数组）</span>
    <span class="token comment" spellcheck="true">// a = [100,200,300];</span>
    a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [100,200,300,400]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//var a;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个声明c的动作在形参赋值阶段已经结束。但是这个赋值动作还是要执行的。</span>
<span class="token punctuation">}</span>

<span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ol>
<li>如何区分私有变量和全局变量？<br>1)  在全局作用域下声明（预解释的时候）的变量是全局变量<br>2)  在私有作用域中声明的变量和函数的形参都是私有的变量;在私有作用域中，代码执行的时候遇到了一个变量，首先需要确定他是否为私有的变量，如果是私有的变量,那么和外面的没任何的关系；如果不是私有的，则往当前作用域的上级作用域进行查找，如果上级作用域也没有则继续查找，一直找到window位置…(<code>作用域链</code>)</li>
<li>当函数执行的时候（直接目的：让函数体中的代码执行）<br>首先会形成一个新的作用域，按照如下的步骤执行：<br>1)  如果有形参，先给形参赋值<br>2)  进行私有作用域中的预解释<br>3)  私有作用域中的代码从上到下执行<br>···<br>函数形成一个新的私有的作用域保护了里面的私有变量不受外界的干扰（外面修改不了私有的，私有的也修改不了外面的）</li>
</ol>
<ul>
<li>“<code>闭包</code>“&lt;机制&gt;  </li>
<li>闭包形成的前提条件是函数执行</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-> undefined</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">/*
*   total不是私有的，找全局下的total,
*   也就是在这里出现的所有的total都是全局的0
*/</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    total <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局的total=300</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//300</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//300</span>
</code></pre>
<h4 id="全局作用域下var带和不带的区别"><a href="#全局作用域下var带和不带的区别" class="headerlink" title="全局作用域下var带和不带的区别"></a>全局作用域下var带和不带的区别</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->12</span>

num2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->12 window.num2</span>
</code></pre>
<p><code>区别</code>：带var的可以进行预解释，所以在赋值的前面执行不会报错；不带var的不能进行预解释，在前面执行会报错<br><code>关系</code>：num2 = 12 -&gt; 相当于给window增加了一个叫做num2的属性名,属性值是12；<br>var num = 12 -&gt; 首先他相当于给全局作用域增加了一个全局变量num,他也相当于给window增加了一个属性名num,属性值是12</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    total <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>私有作用域中出现的一个变量不是私有的，则往上级作用域进行查找，上级没有则继续向上查找，一直找到window为止，如果window下也没有呢？</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//Uncaught ReferenceError: total is not defined</span>

        total <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -></span>
</code></pre>
<p>JS中如果在不进行任何特殊处理的情况下，上面的代码报错，<br>后面的代码都不再执行了</p>
<p>获取值：console.log(total); -&gt;报错了<br>设置值：total = 100; (先把上面代码报错那一行注释掉)相当于给window增加了一个属性名total,属性值是100</p>
<h4 id="如何查找当前作用域的上一级作用域？"><a href="#如何查找当前作用域的上一级作用域？" class="headerlink" title="如何查找当前作用域的上一级作用域？"></a>如何查找当前作用域的上一级作用域？</h4><p>看当前函数是在那个作用域下定义的，那么它的上级作用域就是谁，和函数在哪执行的没有任何的关系</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> variable hosting </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux常用命令]]></title>
      <url>http://www.imaxin.cn/2016/02/06/base/linux_cmd/</url>
      <content type="html"><![CDATA[<p>pwd : 显示当前所在的位置<br>cd /aaa ： 进入aaa这个文件夹<br>cd ../ : 退出当前路径<br>cd ../../ : 一次退出两部<br>rm -rf : 删除<br>mkdir : 新建文件夹<br>ls ： 查看当前路径有多少内容<br>vim : 编辑</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM操作和样式操作库的封装]]></title>
      <url>http://www.imaxin.cn/2016/01/29/base/DOM/</url>
      <content type="html"><![CDATA[
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
    <style>
        * {
            font-size: 14px;
        }

        html, body {
            /*background-color: #000;*/
            /*color: #fff;*/
        }
    </style>
<link rel="stylesheet" href="/css/prism-solarizedlight.css" type="text/css"><script src="/js/prism.js"></script></head>
<body>
<article class="article-container"><h3 class="title">DOM操作和样式操作库的封装</h3>
    <div class="article__content article-content" style="height: auto;"><h3>一、DOM常用方法和属性</h3>
        <p>以下粗略的罗列一下DOM的常用方法和属性，由于不是介绍DOM的基础内容，所以就不一一详细说明各个方法和属性了（学习DOM的封装的，一般都对基础DOM比较熟悉了）。</p>
        <strong>1.1、获取页面中元素的方法</strong>
        <ul>
            <li><p>document.getElementById</p></li>
            <li><p>context.getElementsByTagName：把指定容器中子孙容器中所有标签名为TAGNAME的都获取到了</p></li>
            <li><p>document.getElementsByName：在IE浏览器中只对表单元素的name起作用</p></li>
            <li><p>document.body || document.documentElement</p></li>
            <li><p>context.querySelector、context.querySelectorAll：在IE6~8下不兼容，通过这个获取到的节点集合，不存在DOM映射</p></li>
        </ul>
        <strong>1.2、描述节点和节点之间关系的属性</strong>
        <ul>
            <li><p>childNodes</p></li>
            <li><p>children：在IE6~8下获取的结果和标准浏览器获取的结果不一致</p></li>
            <li><p>parentNode</p></li>
            <li><p>previousSibling/previousElementSibling</p></li>
            <li><p>nextSibling/nextElementSibling</p></li>
            <li><p>lastChild/lastElementChild</p></li>
            <li><p>firstChild/firstElementChild</p></li>
        </ul>
        <strong>注意：</strong>
        <ol>
            <li><p>在标准浏览器中会把空格和换行当做文本节点处理</p></li>
            <li><p>所有带Element的属性在IE6~8中都不兼容</p></li>
        </ol>
        <strong>1.3、DOM的增删改</strong>
        <ul>
            <li><p>createElement</p></li>
            <li><p>document.createDocumentFragment</p></li>
            <li><p>appendChild</p></li>
            <li><p>insertBefore</p></li>
            <li><p>cloneNode(true/false)</p></li>
            <li><p>replaceChild</p></li>
            <li><p>removeChild</p></li>
            <li><p>get/set/removeAttribute</p></li>
        </ul>
        <h3>二、获取元素的方法封装</h3><strong>2.1、获取某一个容器的元素子节点（children）</strong>
        <p>首先获取所有的子节点（childNodes），在所有的子节点中，把元素节点过滤出来（nodeType===1的时候代表的是元素节点）。</p>
        <p>如果该方法传递两个参数，第二个参数是一个标签名的话，我们还要在获取的子元素中把对应标签名进行二次筛选。</p>
        <pre><code>function children(curEle, tagName) {
    var ary = ;
    // --&gt; IE6~8不能使用内置的children属性，我们自己写代码实现
    if(/MSIE (6|7|8)/i.test(navigator.userAgent)) {
        var nodeList = curEle.childNodes;
        for (var i = 0, len = nodeList.length; i &lt; len; i++){
        var curNode = nodeList[i];
        if (curNode.nodeType === 1) {
            ary[ary.length] = curNode;
        }
    }
        nodeList = null;
    } else {
        // 标准浏览器中，我们直接使用children即可，但是这样获取的是一个元素集合（类数组），为了和IE6~8下保持一致，我们借用数组原型上的slice，实现把类数组转换为数组。
        ary = Array.prototype.slice.call(curEle.children);
    }

    // --&gt; 二次筛选
    if (typeof tagName === 'string') {
        for (var k = 0; k &lt; ary.length; k++) { // 数组长度会减小的情况，必须要使用这样的方式判断长度，不能和上面一样
            var curEleNode = ary[k];
            if (curEleNode.nodeName.toLowerCase !== tagName.toLowerCase) {
                // --&gt; 不是我想要的标签
                ary.splice(k, 1);
                k --;
            }
        }
    }

    return ary;
}</code></pre>
        <p>这个方法中，判断是否是IE6~8用的是正则：<code>/MSIE (6|7|8)/i.test(navigator.userAgent)</code>，而在封装DOM库的时候，在很多地方都要判断是否是IE6~8，我们可以每次都判断一次是不是IE6~8....不过，如果我们只判断一次，然后在所有的方法中都用，那是不是更好呢？....这就是JavaScript库封装中常用的惰性思想。
        </p><strong>2.2、封装库的惰性思想</strong>
        <p>我们封装库的方式使用单例的方式，然后将单例放到一个自执行函数中，基本的形式为：</p>
        <pre><code>var utils = (function  {
    function children(curEle, tagName) {
        // ...
    }

    return {
        children: children
    }
});</code></pre>
        <p>这时候我们可以将判断是否是IE6~8的方法，放在自执行函数中，然后在具体的方法中使用：</p>
        <pre><code>var utils = (function  {
    var flag = "getComputedStyle" in window;
    function children(curEle, tagName) {
        if(!flag){
 // IE6~8的情况
        } else {
 // 非IE6~8
        }
    }

    return {
        children: children
    }
});</code></pre>
        <p>在自执行函数中的flag变量不销毁，存储的是判断当前浏览器是否兼容getComputedStyle，兼容的话是标准浏览器，但是如果<code>flag=false</code>，说明当前浏览器是IE6~8。</p>
        <p>
            惰性思想：惰性思想是JavaScript搞基编程技巧之一，在第一次给utils赋值的时候就已经把兼容处理好了，把最后结果存放在flag变量中，以后在每一个方法中，只要是IE6~8不兼容的，我们不需要重新检测，只需要使用flag的值即可。</p>
        <p>那么用这种方式来改造当前的类库：</p>
        <pre><code>var utils = (function  {
    var flag = "getComputedStyle" in window;
    function children(curEle, tagName) {
        var ary = ;
        if (!flag) {
             var nodeList = curEle.childNodes;
             for (var i = 0, len = nodeList.length; i &lt; len; i++) {
             var curNode = nodeList[i];
             curNode.nodeType === 1 ? ary[ary.length] = curNode : null;
         }
            nodeList = null;
        } else {
     ary = this.listToArray(curEle.children);
            }
            if (typeof tagName === "string") {
     for (var k = 0; k &lt; ary.length; k++) {
     var curEleNode = ary[k];
     if (curEleNode.nodeName.toLowerCase !== tagName.toLowerCase) {
     ary.splice(k, 1);
     k--;
     }
     }
            }
            return ary;
    }

    return {
        children: children
    }
});</code></pre>
        <p class="img-wrapper-embedded" style="width: 100%; min-height: 119.567px;"><img src="http://p9.pstatp.com/large/18f3000a9b986d6d4ccd" img_width="638" img_height="234" alt="DOM操作和样式操作库的封装" onerror="javascript:errorimg.call(this);" data-index="0"></p>
        <p>工具方法加入类库.png</p><strong>2.3、获取上一个兄弟元素节点（prev）</strong>
        <p>首先获取当前元素的上一个哥哥节点，判断是否为元素节点，不是的话基于当前的节点继续找上面的哥哥节点.....一直找到哥哥元素节点为止，如果没有哥哥节点，返回null即可。</p>
        <pre><code>function prev(curEle) {
    if (flag) {
        return curEle.previousElementSibling;
    }
    var pre = curEle.previousSibling;
    while (pre &amp;&amp; pre.nodeType !== 1) {
        pre = pre.previousSibling;
    }
    return pre;
}</code></pre>
        <strong>2.4、获取下一个兄弟元素节点（next）</strong>
        <pre><code>function next(curEle) {
    if (flag) {
        return curEle.nextElementSibling;
    }
    var nex = curEle.nextSibling;
    while (nex &amp;&amp; nex.nodeType !== 1) {
        nex = nex.nextSibling;
    }
    return nex;
}</code></pre>
        <strong>2.5、获取前面所有的兄弟元素节点（prevAll）</strong>
        <pre><code>function prevAll(curEle) {
    var ary = ;
    var pre = this.prev(curEle);
    while (pre) {
        ary.unshift(pre);
        pre = this.prev(pre);
    }
    return ary;
}</code></pre>
        <strong>2.6、获取后面所有的兄弟元素节点（nextAll）</strong>
        <pre><code>function nextAll(curEle) {
    var ary = ;
    var nex = this.next(curEle);
    while (nex) {
        ary.push(nex);
        nex = this.next(nex);
    }
    return ary;
}</code></pre>
        <strong>2.7、获取相邻的两个元素节点（sibling）</strong>
        <pre><code>function sibling(curEle) {
    var pre = this.prev(curEle);
    var nex = this.next(curEle);
    var ary = ;
    pre ? ary.push(pre) : null;
    nex ? ary.push(nex) : null;
    return ary;
}</code></pre>
        <strong>2.8、获取所有的兄弟元素节点（siblings）</strong>
        <pre><code>function siblings(curEle) {
    return this.prevAll(curEle).concat(this.nextAll(curEle));
}</code></pre>
        <strong>2.9、获取当前元素的索引（index）</strong>
        <pre><code>function index(curEle) {
    return this.prevAll(curEle).length;
}</code></pre>
        <strong>2.10、获取第一个元素子节点（firstChild）</strong>
        <pre><code>function firstChild(curEle) {
    var chs = this.children(curEle);
    return chs.length &gt; 0 ? chs[0] : null;
}</code></pre>
        <strong>2.11、获取最后一个元素子节点（lastChild）</strong>
        <pre><code>function lastChild(curEle) {
    var chs = this.children(curEle);
    return chs.length &gt; 0 ? chs[chs.length - 1] : null;
}</code></pre>
        <h3>三、操作元素的方法封装</h3><strong>3.1、向指定容器的末尾追加元素（append）</strong>
        <pre><code>function append(newEle, container) {
    container.appendChild(newEle);
}</code></pre>
        <strong>3.2、向指定容器的开头追加元素（prepend）</strong>
        <p>把新的元素添加到容器中第一个子元素节点的前面,如果一个元素子节点都没有,就放在末尾即可。</p>
        <pre><code>function prepend(newEle, container) {
    var fir = this.firstChild(container);
    if (fir) {
        container.insertBefore(newEle, fir);
        return;
    }
    container.appendChild(newEle);
}</code></pre>
        <strong>3.3、把新元素(newEle)追加到指定元素(oldEle)的前面（insertBefore）</strong>
        <pre><code>function insertBefore(newEle, oldEle) {
    oldEle.parentNode.insertBefore(newEle, oldEle);
}</code></pre>
        <strong>3.4、把新元素(newEle)追加到指定元素(oldEle)的后面（insertAfter）</strong>
        <p>相当于追加到oldEle弟弟元素的前面,如果弟弟不存在,也就是当前元素已经是最后一个了,我们把新的元素放在最末尾即可。</p>
        <pre><code>function insertAfter(newEle, oldEle) {
    var nex = this.next(oldEle);
    if (nex) {
        oldEle.parentNode.insertBefore(newEle, nex);
        return;
    }
    oldEle.parentNode.appendChild(newEle);
}</code></pre>
        <h3>四、操作样式的方法封装</h3><strong>4.1、验证当前元素中是否包含className这个样式类名（hasClass）</strong>
        <pre><code>function hasClass(curEle, className) {
    var reg = new RegExp("(^| +)" + className + "( +|$)");
    return reg.test(curEle.className);
}</code></pre>
        <strong>4.2、给元素增加样式类名（addClass）</strong>
        <pre><code>function addClass(curEle, className) {
    var ary = className.replace(/(^ +| +$)/g, "").split(/ +/g);
    for (var i = 0, len = ary.length; i &lt; len; i++) {
        var curName = ary[i];
        if (!this.hasClass(curEle, curName)) {
            curEle.className += " " + curName;
        }
    }
}</code></pre>
        <strong>4.3、给元素移除样式类名（removeClass）</strong>
        <pre><code>function removeClass(curEle, className) {
    var ary = className.replace(/(^ +| +$)/g, "").split(/ +/g);
    for (var i = 0, len = ary.length; i &lt; len; i++) {
        var curName = ary[i];
        if (this.hasClass(curEle, curName)) {
            var reg = new RegExp("(^| +)" + curName + "( +|$)", "g");
            curEle.className = curEle.className.replace(reg, " ");
        }
    }
}</code></pre>
        <strong>4.5、通过元素的样式类名获取一组元素集合（getElementsByClass）</strong>
        <pre><code>function getElementsByClass(strClass, context) {
    context = context || document;
    if (flag) {
        return this.listToArray(context.getElementsByClassName(strClass));
    }
    //-&gt;IE6~8
    var ary = , strClassAry = strClass.replace(/(^ +| +$)/g, "").split(/ +/g);
    var nodeList = context.getElementsByTagName("*");
    for (var i = 0, len = nodeList.length; i &lt; len; i++) {
        var curNode = nodeList[i];
        var isOk = true;
        for (var k = 0; k &lt; strClassAry.length; k++) {
            var reg = new RegExp("(^| +)" + strClassAry[k] + "( +|$)");
            if (!reg.test(curNode.className)) {
                isOk = false;
                break;
            }
        }
        if (isOk) {
            ary[ary.length] = curNode;
        }
    }
    return ary;
}</code></pre>
        <h3>五、样式的设置和获取相关的方法</h3><strong>5.1、获取元素的样式值（getCss）</strong>
        <pre><code>function getCss(attr) {
    var val = null, reg = null;
    if (flag) {
        val = window.getComputedStyle(this, null)[attr];
    } else {
        if (attr === "opacity") {
            val = this.currentStyle["filter"];
            reg = /^alpha\(opacity=(\d+(?:\.\d+)?)\)$/;
            val = reg.test(val) ? reg.exec(val)[1] / 100 : 1;
        } else {
            val = this.currentStyle[attr];
        }
    }
    reg = /^(-?\d+(\.\d+)?)(px|pt|em|rem)?$/;
    return reg.test(val) ? parseFloat(val) : val;
}</code></pre>
        <strong>5.2、给当前元素的某一个样式属性设置值(增加在行内样式上的)</strong>
        <pre><code>function setCss(attr, value) {
    if (attr === "float") {
        this["style"]["cssFloat"] = value;
        this["style"]["styleFloat"] = value;
        return;
    }
    if (attr === "opacity") {
        this["style"]["opacity"] = value;
        this["style"]["filter"] = "alpha(opacity=" + value * 100 + ")";
        return;
    }
    var reg = /^(width|height|top|bottom|left|right|((margin|padding)(Top|Bottom|Left|Right)?))$/;
    if (reg.test(attr)) {
        if (!isNaN(value)) {
            value += "px";
        }
    }
    this["style"][attr] = value;
}</code></pre>
        <strong>5.3、给当前元素批量的设置样式属性值（setGroupCss）</strong>
        <pre><code>function setGroupCss(options) {
    for (var key in options) {
        if (options.hasOwnProperty(key)) {
            setCss.call(this, key, options[key]);
        }
    }
}</code></pre>
        <strong>5.4、实现了获取、单独设置、批量设置元素的样式值（css）</strong>
        <pre><code>function css(curEle) {
    var argTwo = arguments[1], ary = Array.prototype.slice.call(arguments, 1);
    if (typeof argTwo === "string") {
        if (typeof arguments[2] === 'undefined') {
            return getCss.apply(curEle, ary);
        }
        setCss.apply(curEle, ary);
    }
    argTwo = argTwo || 0;
    if (argTwo.toString === "[object Object]") {
        setGroupCss.apply(curEle, ary);
    }
}</code></pre>
        <h3>六、总结</h3>
        <p>以上的所有方法中，方法名大部分和jQuery中的类似，getElementsByClass方法在jQuery中没有实现，但是jQuery的一部分选择器也是基于这个方法原理来实现的。</p>
        <p>firstChild、lastChild在jQuery中没有。</p></div>

</article>
</body>
</html>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串基础]]></title>
      <url>http://www.imaxin.cn/2015/06/29/base/string/</url>
      <content type="html"><![CDATA[<p>一个字符串是有多个字符组成的</p>
<p>str.length获取字符串中字符的个数（字符串的长度）字符串中也存在索引，也是从0开始的，’w’这个字符的索引就是0<br>空格、换行也是一个字符；</p>
<h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h2><p>获取指定索引位置的字符</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>charCodeAt（索引）获取指定索引位置的字符对应的ASCII值<br>ASCII值：每一个字母、汉字、特殊符号都有一个对应的码值（Unicode）</p>
<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>substr（n，m）从索引n（包含n）开始截取m个字符，<br>substring（n,m）从索引n开始，找到索引m处（不包含m）将找到字符返回<br>slice（n,m）从索引n开始，找到索引m处（不包含m），将找到的字符返回slice支持，负数作为索引，str.length+负数索引，如果只写了一个n，没有m,截取到末尾</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="查找字符的索引"><a href="#查找字符的索引" class="headerlink" title="查找字符的索引"></a>查找字符的索引</h2><p>indexOf（字符）：获取指定字符在字符串中第一次出现的索引位置<br>lastIndexOf（字符）：获取指定字符在字符串中最后一次出现的索引位置<br>如果没有这个字符，返回的是-1，基于这个理念我们经常用这两个方法判断字符串中是否包含某个字符</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'代表包含e这个字符'</span><span class="token punctuation">}</span>
</code></pre>
<h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><p>toLowerCase:将所有字母转换为小写<br>toUpperCase：将所有字母转换为大写</p>
<pre class=" language-javascript"><code class="language-javascript">str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>var str=”welcome! to beijing my name liwenli!”;<br>replace（要替换的老字符，替换成的新字符）</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"welcome"</span><span class="token punctuation">,</span><span class="token string">"woaini"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>在不使用正则的情况下，每一次调用方法只能替换一次<br>一般情况下，用正则处理</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/l/g</span><span class="token punctuation">,</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将所有l换成j</span>
</code></pre>
<h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>将字符串按照指定的分隔符拆分成数组的每一项，和数组中的join对应；</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"1+2+3+4+8"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", "2", "3", "4", "8"]</span>

<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"1+2+3+4+8"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果没有拆分符“+”就会每一项给拆分</span>
<span class="token comment" spellcheck="true">// ["1", "+", "2", "+", "3", "+", "4", "+", "8"]</span>
</code></pre>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>去除首尾空格</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'  ni hao   '</span>
str<span class="token punctuation">.</span><span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "ni hao   "</span>

str<span class="token punctuation">.</span><span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "  ni hao"</span>
</code></pre>
<h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>查找字符在字符串中出现位置的索引值</p>
<h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h2><ol>
<li>单双引号不能同时使用 str+=”<div class="bg"></div>“;</li>
<li>在字符串中拼接变量，最外面用的是””，里面就写”+变量+”（外面用’’同理），<br>var num=2; str+=”<span class="bg"+num+""></span>“;</li>
<li>使用转译字符</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的数组排序]]></title>
      <url>http://www.imaxin.cn/2015/05/30/base/sort/</url>
      <content type="html"><![CDATA[<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>方法一：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>方法二：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fixArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        obj<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">fixArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>当前项和后一项进行比较，如果当前项大于后一项就交换位置</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 控制比较轮数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 控制比较次数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">65146</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">854</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>思路：</p>
<ol>
<li>求出中间值的索引；</li>
<li>通过索引找到中间值；4；</li>
<li>创建两个数组：left; right;</li>
<li>遍历数组中的每一项，让每一项跟4中间值进行比较；比他大的，放右边，比他小的放左边；</li>
<li>left.concat(16,right)</li>
<li>–函数自己调用自己；–递归</li>
<li>停止拆分的条件：当数组的长度&lt;=1的时候；直接返回数组</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//停止拆分的条件；-如果满足停止拆分，阻断后续代码的执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return：1）返回值 2）阻断程序执行；</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//1.求出中间值的索引；</span>
    <span class="token keyword">var</span> point <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//2.通过索引找到中间值；4；</span>
    <span class="token keyword">var</span> pointValue <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//3.创建两个数组：left=[]; right=[]</span>
    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//4.遍历数组中的每一项，让每一项跟16中间值进行比较；比他大的，放右边，比他小的放左边；</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> pointValue <span class="token operator">?</span> right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>pointValue<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">65146</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">854</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>思路：</p>
<ol>
<li>先拎出一个数组； ary.splice(0,1)=&gt;[98]</li>
<li>遍历ary数组中的每一项；分别跟[4,16,28,88,98]数组进行比较：</li>
</ol>
<p>插排的核心：拿ary数组中的每一项，跟left数组从后往前的比较，比他小，继续往前比较，比他大，放到他下一项的前面。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1.先拎出一个数组；</span>
    <span class="token keyword">var</span> left <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//2.拿ary数组中的每一项，跟left数组从后往前的比较，比他小，继续往前比较，比他大，放到他下一项的前面；</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> left<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> left<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//判断比到头了</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    left<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">65146</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">854</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组的常用方法]]></title>
      <url>http://www.imaxin.cn/2015/05/29/base/array/</url>
      <content type="html"><![CDATA[<p>数组是值的有序集合，数组中每一项的值没有类型限制.</p>
<ul>
<li>数组定义<br>数组直接量创建：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
构造函数的方式创建：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre>
</li>
</ul>
<h3 id="数组添加和删除"><a href="#数组添加和删除" class="headerlink" title="数组添加和删除"></a>数组添加和删除</h3><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>向数组末尾添加一个或多个元素<br>返回：新数组的长度<br>原数组：改变</p>
<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>向数组开头添加一个或多个元素<br>返回：新数组的长度<br>原数组：改变</p>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>连接两个或是多个数组<br>返回：一个被连接后的数组<br>原数组：不改变<br>arr.concat(arr1, arr2…arrN)</p>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除数组最后一项,数组length值减1，如果数组已经为空，返回undefined<br>返回：被删除的那一项的值<br>原数组：改变</p>
<h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>删除数组第一项,数组length值减1<br>返回：被删除的那一项的值<br>原数组：改变</p>
<h3 id="slice-和-splice-方法"><a href="#slice-和-splice-方法" class="headerlink" title="slice 和 splice 方法"></a>slice 和 splice 方法</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>从已有的数组中返回规定的元素，<br>返回：一个新数组，包含从索引start到索引end(注意：不包含索引为end的这个元素)<br>原数组：不改变<br>不传参数：将原数组复制一份<br>一个参数：从此处一直截取到数组末尾结束，如果这个参数为负数，负几就从倒数第几开始截取数组<br>两个参数：start 到 end 不包括end</p>
<h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>可以用于对数组执行添加、删除、修改的功能<br>返回：被删除的项所组成的一个新数组<br>原数组：改变<br>使用语法：arr.splice(index, delCount, item1, item2…itemN);</p>
<ul>
<li>插入功能（只插入）：arr.splice(start, 0, args); 在索引为start项前面插入args，返回空数组（因为没有删除），原数组改变</li>
<li>替换功能（删除和插入）：arr.splice(start, delCount, args);</li>
<li>删除功能（只删除）: arr.splice(start, delCount); 返回的是被删除的元素数组，若没有删除任何元素，则返回空数组。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向数组末尾添加新的属性值</span>
ary<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
ary<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向数组开始添加新的属性值</span>
ary<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除数组首相</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从索引n开始，删除m个</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从索引n开始删除m个，将x添加到删除位置</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将x添加到索引n的前面</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原数组清空，返回一个和原数组一样的新数组</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将x添加到数组开头</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向数组末尾添加</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
<span class="token comment" spellcheck="true">//以上所有的方法都会改变原数组</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原数组不变返回一个空数组</span>

ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从索引n开始，查找到索引m处（不包含m），返回截取到的新数组</span>
ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//克隆一份和原数组一致的新数组</span>
<span class="token comment" spellcheck="true">//slice不会改变原数组</span>

<span class="token comment" spellcheck="true">//拼接</span>
ary<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼接数组，如果没有传递参数，那么他的作用是克隆一份新数组</span>
</code></pre>
<h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><p>数值、布尔值、对象和字符串都有toString方法，但null和undefined没有此方法<br>如果给toString传递参数，可以是2,8,16，将数字转化为相应进制<br>js在进行某些数据类型转换时，会隐式的调用toString方法。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h3><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>颠倒数组中元素的顺序<br>不需要传参<br>返回：改变后的原数组本身<br>原数组：改变</p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>在原数组上进行排序<br>不传参 arr.sort(); 按ASCII码字母顺序对数组中的元素进行排序。<br>在需要标准排序时，可以将函数直接量作为该方法的传参，从而实现排序，比如：对DOM元素排序，对对象的排序。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> aNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">543</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
aNum<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>上面例子中<br>回调函数的参数a, b是数组中两项从左到右按个每项的值<br>如果 a - b 的值是小于0的值 不调换位置<br>如果 a - b 的值是大于0的值 调换位置<br>a - b 从小到大<br>b - a 从大到小</p>
<p>带单位的排序方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> aNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'33px'</span><span class="token punctuation">,</span> <span class="token string">'22px'</span><span class="token punctuation">,</span> <span class="token string">'67px'</span><span class="token punctuation">,</span> <span class="token string">'3px'</span><span class="token punctuation">,</span> <span class="token string">'543px'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
aNum<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h3><h4 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString()"></a>toLocaleString()</h4><p>将数组转换为本地字符串，作用和toString差不多，但此方法是使用地区特定的分隔符来将生成的字符串连接起来</p>
<h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h4><p>数组中可以返回Array对象的原始值，通常都是在后台隐式的调用该方法，一般不显示的出现在代码中</p>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>将数组的所有元素都按指定的分隔符分隔，转换成字符串</p>
<h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>将字符串按片段分隔创建数组，和join()的功能相反,可以传符号、正则等</p>
<h3 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h3><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>用于搜索整个数组中具有给定值的元素，并且返回找到的第一个元素的索引值，如果没有找到则返回-1。<br>参数说明：<br>第一个参数是必须的，传入需要搜索的目标值<br>第二个参数可选，即指定开始搜索的位置，如果不传的话默认从头开始搜索，如果是负值，则从arr.lenth-n处开始搜索</p>
<h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h4><p>基本同上，不过是从后往前搜索</p>
<p>字符串中也有这两个方法，是兼容的</p>
<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>模拟forEach()方法的实现原理</p>
<pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myForEach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">'请输入正确函数'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">543</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">myForEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// array 即输入的原数组的值</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p>这个方法对数组中的每一项都运行给定的函数直接量，如果该函数对每一项都返回true，则该方法返回true，注意是每一项都满足条件该方法才会返回true</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>

<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>该方法对数组中的每一项都运行给定函数，返回该函数返回true的项组成的数组，从单词字面意思理解，该方法是对数据执行一个过滤的作用，满足条件的返回，不满足条件的丢弃</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [6, 7]</span>
</code></pre>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>对数组每一项运行给定函数，需要注意的是，这个方法没有返回值。在编码过程中使用这个方法会带来很多便利，因为该方法就有一个遍历数组元素的作用，不用每次的写一个for循环来获取数组的每一项进行操作了</p>
<h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>对数组每一项运行给定函数，返回每次函数调用的结果组成的数组，注意：这里返回的数组，和some()等方法返回布尔值不一样，使用过程中需要区别。<br>原数组：不改变</p>
<h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>对数组每一项运行给定函数，如果该函数对任一项都返回true,则该方法返回true</p>
<h3 id="缩小方法"><a href="#缩小方法" class="headerlink" title="缩小方法"></a>缩小方法</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>该方法从数组的第一项开始逐个遍历至尾，使用指定的函数来将数组的元素进行整合，只生成单个的值。<br>reduce()需要两个参数。第一个参数是执行化简操作的函数，这个参数必须；第二个参数是一个传递个函数的初始值。<br>注意：所谓初始值就传给个第一个函数参数执行操作的第一个值，在接下来的操作中，这个值就是上一次函数的返回值了，而当第二个传参不使用时，化简函数就使用数组的第一个元素和第二个元素作为其第一个和第二个参数进行计算。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组元素求和</span>
<span class="token keyword">var</span> multi <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组各元素的积</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 求数组中最大值</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 求数组中最小值</span>
</code></pre>
<h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h4><p>该方法的使用和reduce()是一样的，这里可以联想到 indexOf()方法和 lastindexOf()方法的关系，即reduceRight()方法是按照数组索引从高到低的处理数组</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[递归应用]]></title>
      <url>http://www.imaxin.cn/2015/05/29/base/digui/</url>
      <content type="html"><![CDATA[<p>快速排序就是递归思想实现的。</p>
<h3 id="1到n之间不能被2整除的数的积"><a href="#1到n之间不能被2整除的数的积" class="headerlink" title="1到n之间不能被2整除的数的积"></a>1到n之间不能被2整除的数的积</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">caculate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">caculate</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">caculate</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token function">caculate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre>
<h3 id="1-100-之间不能被3整除的数之和"><a href="#1-100-之间不能被3整除的数之和" class="headerlink" title="1 - 100 之间不能被3整除的数之和"></a>1 - 100 之间不能被3整除的数之和</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">excute</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">excute</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">excute</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token function">excute</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre>
<h3 id="通过setTimeout实现setInterval功能"><a href="#通过setTimeout实现setInterval功能" class="headerlink" title="通过setTimeout实现setInterval功能"></a>通过setTimeout实现setInterval功能</h3><p>利用递归调用自身，比setInterval更易控制</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">events</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清除上一次定时器</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 控制递归结束</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Date时间类型]]></title>
      <url>http://www.imaxin.cn/2015/05/27/base/date/</url>
      <content type="html"><![CDATA[<p>Date：是时间对象，它也是对象数据类型的一个细分<br>获取的是当前自己电脑的时间（获取客户端的时间）<br>var nowTime = new Date();<br>GMT：格林尼治时间（经纬度都是0）<br>中国是 GMT+0800 东八区<br>美国是 UTC-0500 西五区<br>var year=nowTime.getFullYear();<br>var month=nowTime.getMonth()+1；0—11<br>var day=nowTime.getDate();日<br>var week=nowTime.getDay();0-6 周日到周六<br>var hour=nowTime.getHours();小时<br>var minute=nowTime.getMinutes();分钟<br>var second=nowTime.getSecond();秒<br>var msSecond=nowTime.getMillisecond();微秒<br>getTime：获取当前操作时间距离1970-01-01 00:00:00 之间的毫秒差</p>
<p>格式化时间：（现在一般用Moment.js）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 年</span>
    <span class="token keyword">var</span> months <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+1=2  月 0 - 11</span>
    <span class="token keyword">var</span> date <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 16 日</span>
    <span class="token keyword">var</span> day <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 星期4  0 - 6 星期日-星期六</span>
    <span class="token keyword">var</span> weeks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'星期日'</span><span class="token punctuation">,</span> <span class="token string">'星期一'</span><span class="token punctuation">,</span> <span class="token string">'星期二'</span><span class="token punctuation">,</span> <span class="token string">'星期三'</span><span class="token punctuation">,</span> <span class="token string">'星期四'</span><span class="token punctuation">,</span> <span class="token string">'星期五'</span><span class="token punctuation">,</span> <span class="token string">'星期六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> hours <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小时 10</span>
    <span class="token keyword">var</span> minutes <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分钟 10</span>
    <span class="token keyword">var</span> seconds <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 秒</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 毫秒</span>
    str <span class="token operator">+</span><span class="token operator">=</span> year <span class="token operator">+</span> <span class="token string">'年'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>months <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'月'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'日'</span> 
    <span class="token operator">+</span> weeks<span class="token punctuation">[</span>day<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">addZ</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>倒计时：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//      时间格式字符串  通常用"/"  考虑兼容性</span>
<span class="token keyword">var</span> tarStr <span class="token operator">=</span> <span class="token string">'2017/2/18 12:00:00'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">timeouts</span><span class="token punctuation">(</span>tarStr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tarTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>tarStr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 转化成标准时间格式</span>
    <span class="token keyword">var</span> curTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//     求总秒差</span>
    <span class="token keyword">var</span> deffTime <span class="token operator">=</span> <span class="token punctuation">(</span>tarTime <span class="token operator">-</span> curTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>deffTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'不好意思！抢购活动已经结束'</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//        console.log(deffTime);</span>
    <span class="token keyword">var</span> cDay <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 换算天</span>
    <span class="token keyword">var</span> cHour <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 换算小时</span>
    <span class="token keyword">var</span> days <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime <span class="token operator">/</span> cDay<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2天</span>
<span class="token comment" spellcheck="true">//    算出需要转化为小时的秒差</span>
    deffTime <span class="token operator">%</span><span class="token operator">=</span> cDay<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// deffTime = deffTime%cDay;</span>
<span class="token comment" spellcheck="true">//       算出小时</span>
    <span class="token keyword">var</span> hours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime <span class="token operator">/</span> cHour<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        算数转为分钟的秒数</span>
    deffTime <span class="token operator">%</span><span class="token operator">=</span> cHour<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// deffTime = deffTime % cHour;</span>
<span class="token comment" spellcheck="true">//      转化为分钟</span>
    <span class="token keyword">var</span> minutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//      需要转化为秒的秒差</span>
    deffTime <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// deffTime = deffTime % 60;</span>
    <span class="token keyword">var</span> seconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'距离抢购还有：'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'天'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'时'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'分'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span>
    oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 每隔一秒计算一次时间</span>
<span class="token keyword">var</span> timer <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">timeouts</span><span class="token punctuation">(</span>tarStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">timeouts</span><span class="token punctuation">(</span>tarStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 补零</span>
<span class="token keyword">function</span> <span class="token function">addO</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Date </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据类型比较的例子]]></title>
      <url>http://www.imaxin.cn/2015/05/27/base/typeCompare/</url>
      <content type="html"><![CDATA[<p>两个等号进行比较时的规律<br> 1、对象==对象  返回值永远是false<br> 对象包含 数组类 [] 对象类 {}<br> {}=={}<br> []==[]<br> {}==[]<br> 两个等号左右的值，只有是不同数据类型的时候，才需要进行转化，如果是相同数据类型，就不需要转化</p>
<p>2、对象==字符串<br> 等号两侧数据类型不同，需要转为相同数据类型<br> 将对象转为字符串，调用.toString()方法<br> {}.toString()–&gt;”[object Object]”<br> [].toString()–&gt;””<br> {}==””   “[object Object]”==””  –&gt;false<br> []==””   “”==””  –&gt;true</p>
<p> 3、对象==数字<br> 第一步将对象转为字符串<br> 第二步将字符串转为数字<br> 第三步数字和数字进行比较<br> []==0 –》[].toString()==0 –&gt;””==0 –&gt;Number(“”)==0–&gt;0==0  true<br> {}==0 –&gt;{}.toString()==0–&gt;”[object Object]”==0 –&gt;Number(“[object Object]”)==0–&gt;NaN==0  false</p>
<p> 4、对象==布尔  最终都转为数字进行比较<br> 第一步将对象转为字符串<br> 第二步将字符串转为数字<br> 第三步将布尔转为数字<br> 第四步数字和数字进行比较<br> []==true<br> 第一步：[].toString()==Number(true) –》””==1<br> 第二步：Number(“”)==1 –&gt; 0==1<br> 返回值：false<br> {}==false<br> 第一步：{}.toString()==Number(false)–&gt;”[object Object]”==0<br> 第二步：Number(“[object Object]”)==0–&gt;NaN==0<br> 返回值：false</p>
<p>5、字符串==数字<br> 将字符串转为数字<br> “123”==1   – &gt;Number(“123”)==1  –&gt;  123==1 false</p>
<p> 6、字符串==布尔<br> 字符串转为数字  布尔转为数字<br> “1”==true   Number(“1”)==Number(true) –&gt;  1==1  true<br> “1”==!””    Number(“1”)==!Boolean(“”) –&gt; 1==!false –&gt; 1==true–&gt;1==Number(true) –&gt;1==1  true</p>
<p> 7、数字==布尔<br> 布尔转为数字<br> true  – 》1<br> false –》0</p>
<p> 8、null==undefined   true<br> null===undefined   false</p>
<p> 9、null==其他数据类型  永远是false<br> undefined == 其他数据类型 永远是false</p>
<p> 10、NaN==NaN  永远是false</p>
<p>在运算之前，分清楚等号两侧的数据类型<br>（1+1）==（1+2）<br> 2==3<br>等号两侧如果有运算，先进行运算，等号两侧是进行最终值的比较</p>
<p>[]==![]<br>对象==布尔<br>[].toString() –&gt; “” –&gt; Number(“”) –&gt; 0<br>![]–!Boolean([])–&gt;!true–&gt;false–Number(false)–&gt; 0<br>0==0   true</p>
<p>parseFloat(“3.4b”)==Number(“3.4”)<br>数字==数字<br>3.4=3.4  true</p>
<p>!{}==false<br>布尔==布尔<br>!{} – &gt; !Boolean({})–&gt;!true–&gt;false<br>false<br>false==false  true</p>
<p>![]==0<br>布尔==数字<br>![]–!Boolean([])–&gt;!true–&gt;false–Number(false)–&gt; 0<br>0<br>0==0  true</p>
<p>!([]=={})<br>!(这个结果取反)   !（对象==对象）！（false） –》true</p>
<p>[]==[].toString()<br>对象==字符串<br>[]–&gt;[].toString()–&gt;””<br>[].toString()–&gt;””<br>“”==””  true</p>
<p>{name:123}==!false<br>对象==布尔<br>{name:123}–》{name:123}.toString()–&gt;”[object Object]”–&gt;Number(“[object Object]”)–&gt;NaN<br>!false–&gt;true–&gt;Number(true)–&gt;1<br>NaN==1   false</p>
<p>1=={}<br>数字==对象<br>1<br>{}–》{}.toString()–&gt;”[object Object]”–&gt;Number(“[object Object]”)–&gt;NaN<br>1==NaN  false</p>
<p>“1”==[1]<br>字符串==对象<br>“1”<br>[1]–&gt;[1].toString()–&gt;”1”<br>“1”==”1” true</p>
<p>1===parseInt(“1.2nxskdjsk”)<br>数字===数字<br>1===1  true</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中的数据类型]]></title>
      <url>http://www.imaxin.cn/2015/05/27/base/jsDataType/</url>
      <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>js中的数据类型分为基本数据类型和引用数据类型</p>
<p>基本数据类型：number string boolean null undefined<br>引用数据类型：<br>对象object：Array Object RegExp Math Date String Number<br>函数Function</p>
<h3 id="number数据类型"><a href="#number数据类型" class="headerlink" title="number数据类型"></a>number数据类型</h3><p>包含整数和浮点数。</p>
<p>将其他数据类型转为数字数据类型的方法？<br>Number()：<br>强制将其他数据类型转为数字类型，当转化值中有一个不是数字的时候，就返回NaN，如果是数字的时候直接返回数字，Number()这个方法的返回值只有数字或NaN。<br>NaN：not a number 非有效数字</p>
<ul>
<li>Number({})<br>对象数据类型转化为数字的时候，首先会转化为字符串，然后再转化为数字。<br>第一步 先将括号中的{}转为字符串，调用.toString()方法<br>第二步 {}.toString() 转为字符串 最终值为”[object Object]”<br>Number(“[object Object]”) 最终值是NaN</li>
<li>Number([])<br>第一步 [].toString() 转为字符串最终值为 “” （空字符串）<br>第二步 Number(“”)  最终值是0</li>
<li>Number(null) 最终值是0</li>
<li>Number(undefined) 最终值是NaN</li>
<li>Number(true) 最终值是1</li>
<li>Number(false) 最终值是0<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"1+1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>
<span class="token comment" spellcheck="true">//console.log(Number([1,2]));</span>
<span class="token comment" spellcheck="true">//[1,2].toString() -- > "1,2"</span>
<span class="token comment" spellcheck="true">//Number("1,2") -- >NaN</span>
</code></pre>
Number()中的值如果是</li>
</ul>
<ol>
<li>字符串的时候，只要字符中有一个值不是数字返回NaN</li>
<li>对象的时候，先将对象转为字符串（调用.toString()方法），然后将字符串转为数字</li>
<li>布尔的时候，true为1，false 0</li>
<li>null的时候，为0</li>
<li>undefined的时候，为NaN</li>
</ol>
<p>isNaN()<br>检测一个值不是一个数字，返回值是布尔类型的值，要么是true要么是false，isNaN在验证之前，会先调用Number()方法，然后再去检查Number()方法的返回值。</p>
<p>parseFloat()<br>将字符串中的值从左向右查找，遇到非数字停止查找，将查找到的结果作为返回值，可以识别小数点</p>
<p>parseInt()<br>将字符串中的值从左向右查找，遇到非数字停止查找，将查找到的结果作为返回值，只能返回整数</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"123.45bc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123.45</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123.45bc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">".2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">".2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
</code></pre>
<h3 id="boolean数据类型"><a href="#boolean数据类型" class="headerlink" title="boolean数据类型"></a>boolean数据类型</h3><p>布尔是逻辑运算 只有两个值 true 和 false<br>如果判断一个值是真是假，遵循 0 “” NaN null undefined为假，其余都为真</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
<h3 id="js中数据类型的比较"><a href="#js中数据类型的比较" class="headerlink" title="js中数据类型的比较"></a>js中数据类型的比较</h3><p>对象转为布尔值的时候，全部为true</p>
<p>‘==’ 两个值比较是否相等<br>‘===’ 绝对比较 只要两边数据类型不同 直接返回false</p>
<p>val1 == val2 如果两个值不是同一个数据类型 就会进行默认数据类型转换</p>
<p>对象 == 对象  永远不相等<br>对象 == 字符串 将对象通过toString 转化为字符串,再进行比较<br>对象 == 数字 将对象通过toString() 转化为字符串,然后在转化为数字<br>数字 == 字符串 字符串转化为数字 再进行比较<br>数字 == 布尔 将布尔转化为数字(true:1,  false:0) 在进行比较<br>字符串 == 布尔 都转化为数字在进行比较<br>null和undefind 跟任何其他数据类型都不等</p>
<h3 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h3><ol>
<li>typeof</li>
<li>instanceof </li>
<li>constructor</li>
<li>Object.prototype.toString.call()</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随机数]]></title>
      <url>http://www.imaxin.cn/2015/05/06/base/randomNum/</url>
      <content type="html"><![CDATA[<ol>
<li>Math.abs() 取绝对值</li>
<li>Math.ceil()向上取整 （出现小数点就向上＋1）</li>
<li>Math.floor()向下取整</li>
<li>Math.round()四舍五入</li>
<li>Math.max(val1,val2,val3…)取最大值</li>
<li>Math.min(val1,val2,val3…)取最小值</li>
<li>Math.random()获取[0-1)之间的随机小数（不包含1）</li>
<li>Math.round(Math.random()*(m-n)+n) 获取任意两个数之间的随机数</li>
</ol>
<h3 id="n-m-间的随机整数"><a href="#n-m-间的随机整数" class="headerlink" title="n - m 间的随机整数"></a>n - m 间的随机整数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> flag <span class="token operator">=</span> n<span class="token punctuation">;</span>
        n <span class="token operator">=</span> m<span class="token punctuation">;</span>
        m <span class="token operator">=</span> flag
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="取-0-100之间不重复的4个随机整数"><a href="#取-0-100之间不重复的4个随机整数" class="headerlink" title="取 0~100之间不重复的4个随机整数"></a>取 0~100之间不重复的4个随机整数</h3><p>for 循环</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rdomOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            i<span class="token operator">--</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
</code></pre>
<p>while 循环</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rdomWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">rdomWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="在指定字符串中取验证码"><a href="#在指定字符串中取验证码" class="headerlink" title="在指定字符串中取验证码"></a>在指定字符串中取验证码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'abcdefgABCDEFG0123456789'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isNaN</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> temp<span class="token operator">=</span>n<span class="token punctuation">;</span>
        n<span class="token operator">=</span>m<span class="token punctuation">;</span>
        m<span class="token operator">=</span>temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//取随机数</span>
    <span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> val<span class="token operator">=</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> valStr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>valStr<span class="token punctuation">)</span><span class="token operator">===</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            str2<span class="token operator">+</span><span class="token operator">=</span>valStr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数基础]]></title>
      <url>http://www.imaxin.cn/2015/04/20/base/function/</url>
      <content type="html"><![CDATA[<ol>
<li>函数：是由事件驱动或者被调用时，可以重复使用的代码<br>事件驱动：点击事件  鼠标移入事件  鼠标移出事件<br>被调用：sum();–&gt;函数执行</li>
<li>函数的语法（基本语法）<br>定义：<br>关键字 函数名(){函数（函数体/函数代码）}<br>function fnName(){……}<br>执行：<br>函数名();<br>fnName();</li>
<li>函数的特点：<br>1) 函数定义独立存在时没有意义，只有被调用的时候，才会实现函数的功能<br>2) 定义一个函数，可以多次被调用执行，并且每次调用执行都是独立的<br>3) 函数内的变量，在函数外是获取不到的<br>函数是引用数据类型 函数名中存的值是一个地址</li>
<li>闭包：函数在执行的时候，形成私有作用域，里面的变量就成为私有变量，外界获取不到,函数的这种保护机制，叫做闭包</li>
<li>函数的参数：可以让函数内获取函数外的值<br>形参：用来接收外界传递给函数的值<br>形参在函数定义部分 函数名后面的括号内<br>实参：用来定义要传递的值<br>实参在函数执行是 函数名后面的括号内<br>基本语法：<br>function 函数名(形参1,形参2…){}<br>函数名(实参1,实参2…)<br>1) 函数可以不定义参数（形参和实参都不存在）<br>2) 函数如果定义形参而没有传递实参，那么形参获取到的是undefined<br>3) 函数如果只定义实参，而没有定义形参的时候，函数用arguments来接收实参</li>
<li>函数默认接收参数的对象–arguments<br>函数接收参数的方式有两种，第一种是人为定义形参，第二种是arguments<br>arguments（参数集合）是一个对象<br>获取到的值会以类数组的形式储存[1,2,3,4,5]<br>类数组和数组一样，都有索引和长度，类数组中的每一个都是类数组的属性值，类数组的属性名为索引</li>
<li>外界如何获取到函数的返回值（是一个值，而不是返回变量）<br>return 值;<br>1) return 后面可以有返回值，也可以没有返回值<br>2) 函数内出现return 函数内return后的代码就不会执行了</li>
</ol>
<p>返回值会出现undefined有两种情况？</p>
<ol>
<li>没有写return</li>
<li>写了return但没有赋值</li>
</ol>
<p>是否要返回值？<br>“获取”需要返回值，“设置”不需要返回值；</p>
<p>重点：<br>1) return 返回的是值，不是任何的变量<br>2) 函数名() 是函数的执行结果<br>3) 函数名相当于一个变量，是用来代表函数和储存函数的，函数名代表这个函数本身<br>4) return后不返回值的时候，函数执行结果接收到的是undefined</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  任意数求和</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> total<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            total<span class="token operator">+</span><span class="token operator">=</span>cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> total<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"12bc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
